<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelon</title>
  <subtitle>个人博客小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jelon.top/"/>
  <updated>2017-08-10T15:27:22.000Z</updated>
  <id>http://jelon.top/</id>
  
  <author>
    <name>Jelon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 github issues 实现第三方评论系统</title>
    <link href="http://jelon.top/posts/xups-comment-box/"/>
    <id>http://jelon.top/posts/xups-comment-box/</id>
    <published>2017-08-10T07:12:13.000Z</published>
    <updated>2017-08-10T15:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《<a href="http://jelon.top/posts/start-hexo/">静态博客框架 Hexo 入门</a> 》，或者直接访问 Hexo 官网 <a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p>
</blockquote>
<h3 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h3><p>个人博客是基于静态博客系统（Hexo）搭建的，本身是没有具备任何后台功能的，例如搜索、评论系统等。但是，如果你想在静态博客上加上评论功能，也不是无法实现的，这时候就要借助第三方评论系统了。</p>
<p>什么是第三方评论系统？博客或 cms 系统，一般都是有内容和评论两部分组成。评论可以增加博主与用户之间的交流互动，也是博主一对多的传达自己想法和观点的交流平台。所以除了社区平台外，评论也成为一般博客和cms系统必备功能。大型网站本身自己开发了评论系统和分享系统，而一般中小型网站开发的自己的评论系统，成本高。而且垃圾评论和过滤非法关键字难度较大，所以在国内外都有第三评论系统。以下是曾经流行或者正在流行的一些第三方评论系统。</p>
<ul>
<li><p>多说。说是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。多说已经成为国内份额最大的所谓“社交评论框”服务，但是这个行业第一并没有给它带来更多的收益和发展空间。不过可惜，现在已经停止服务了。</p>
</li>
<li><p>搜狐畅言。搜狐畅言是由搜狐推出的一个简单而强大的社会化评论及聚合平台。用户可以直接用自己的社会化网络账户在第三方网站发表评论，并且一键评论同步至社交网络将网站内容和自己的评论分享给好友。增加第三方网站用户活跃度，调动好友参与评论，帮助网站实现社会化网络优化，有效提升网站社会化流量。现在还健在。</p>
</li>
<li><p>友言。友言是国内专业的第三方实时社会化评论系统，“完全社交化”可将评论一键同步到各大微博与社区（目前支持10个社交媒体），同时将评论的回复与跟帖同步至使用的网站上，让网站变得更具有活力和社交性，从而为网站带来更多的回访和流量，是一个简单而强大的社会化评论及聚合平台。现在还健在。</p>
</li>
<li><p>网易云跟帖。网易云跟贴是网易公司推出的强大而又简单的评论聚合与分享平台。坑爹的，在多说发布停止服务声明之后不久，网易云跟帖也分出了停止服务声明。</p>
</li>
<li><p>Disqus。说到第三放评论系统，当然不得不提国外第三方评论系统界的老大 Disqus，只可惜由于天朝网络原因，Disqus 加载很慢，甚至有时候加载不出来，建议用户自备梯子。</p>
</li>
</ul>
<p>那么回归主题，市面上那么多第三方评论系统，就算有那么一两个挂掉了，还是有很多选择呢，为什么还要自己去做一个呢，这不是造轮子吗？其实，一开始我一直用多说的，用的不亦乐乎，突然有一天说挂就挂了，没办法，那我就选择其他的呗，然后就改成网易云，坑爹的，刚改造好没多久，网易云也挂了。</p>
<p>后面我就在网上找啊找啊，发现居然有人用 GitHub Issue 做了一个评论系统，这无疑是一个很好的想法，很有创意啊。当然，我也拿来用了，但是始终觉得有点丑，跟我自己的博客主题不搭，采用了两天，撤了，打算自己做一个。说干就干，程序员总喜欢造轮子。</p>
<h3 id="什么是-GitHub-Issues"><a href="#什么是-GitHub-Issues" class="headerlink" title="什么是 GitHub Issues"></a>什么是 GitHub Issues</h3><p>经常逛 GitHub 的童鞋，都应该知道这个功能，有人理解 GitHub 的 issue 功能，就如同 TODO list。你可以把所有想要在下一步完成的工作，如 feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。具体可以看一下知乎里面别人对 《<a href="https://www.zhihu.com/question/22969033/answer/25927363" target="_blank" rel="external">github issue是做什么的？</a> 》的解答。顺便看一下，我的博客评论数据存储 issues 的仓库地址<a href="https://github.com/jangdelong/blog_comments/issues" target="_blank" rel="external">https://github.com/jangdelong/blog_comments/issues</a>。总之，像我现在要用 github Issues 来制作评论系统的，其实就是把数据存储到 github issues，简单的说可以把 github issues 理解为一个免费的数据库。</p>
<h3 id="评论系统实现"><a href="#评论系统实现" class="headerlink" title="评论系统实现"></a>评论系统实现</h3><p><strong>预备工作</strong></p>
<ul>
<li>创建 OAuth applications。评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application。GitHub 授权登录遵循 <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">OAuth 2.0 标准</a>。OAuth applications 创建如下图所示，填写上面相应的内容。</li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/xups-comment-box/1.jpg?v=2" alt="OAuth"></p>
<p>Application name：你的站点名称；<br>Homepage URL：你的站点主页链接；<br>Application description：站点描述；<br>Authorization callback URL：GitHub 授权成功后返回地址</p>
<p>创建成功之后会生成一个 Client ID 和一个 Client Secret。</p>
<ul>
<li>GitHub REST API v3</li>
</ul>
<p>GitHub 提供了很多方便第三方开发的 API，当然，github issues 的增删改查 API 也在其中，有了这些 API，你才能各种施展奇技淫巧，比如我们现在要写的评论系统。另外，有人怀疑我们应不应该“滥用”这些 API，但是，个人觉得，既然，GitHub 提供了这些 API，就是说明要开放给大家这些权限，应该就不怕你“滥用”。那么，要满足我们现在的需求需要哪些 API 呢，下面我列举一下，以我的账号为例，jangdelong 为 Github 名，blog_comments 为仓库名。</p>
<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues</code>                         获取所有issues信息</p>
<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11</code>                   获取某个issue下的信息 （11 为 issue 编号 ）</p>
<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/11/</code>comments  获取某个issue下的评论</p>
<p><code>GET: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 获取评论 ID 为 111 下的所有 reactions（reactions 包含顶[+1]、踩[-1]、喜欢[heart]等字段）</p>
<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues</code> 创建一个 issue</p>
<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/11/comments</code> 在编号为 11 的 issue 下创建一条评论</p>
<p><code>POST: https://api.github.com/repos/jangdelong/blog_comments/issues/comments/111/reactions</code> 在 ID 为 111 的评论下创建一条 reactions（如 heart）</p>
<p><code>POST：https://developer.github.com/v3/markdown/</code>  markdown 语法解析接口</p>
<p><strong>实现思路</strong></p>
<p>流程图：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">                                            <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">显示已登录</span>    </div><div class="line">                             <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">已登录</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">加载评论列表</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">分页加载</span> </div><div class="line">                             <span class="comment">|</span>              <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">其他</span> </div><div class="line">                             <span class="comment">|</span>              <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">评论操作</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">成功/失败</span>            <span class="comment">|</span></div><div class="line"><span class="comment">开始</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">GitHub</span> <span class="comment">授权登录</span> <span class="comment">?</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span>                                                   <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">结束</span></div><div class="line">                             <span class="comment">|</span>              <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">显示未登录</span>                       <span class="comment">|</span></div><div class="line">                             <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">未登录</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">加载评论列表</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">分页加载</span>          </div><div class="line">                                            <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">其他</span></div><div class="line">                                            <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">评论操作</span> <span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">提示未登录状态</span></div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/xups-comment-box/2.jpg" alt="OAuth"></p>
<p>因此，我们可以将评论系统分为列表（list）、评论框（box）、顶部登录状态栏（signbar）等部分。View 部分的代码组织为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></div><div class="line"><span class="keyword">var</span> JELON = JELON || &#123;&#125;;</div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">JL</span>) </span>&#123;</div><div class="line">	...</div><div class="line">	JL.Renders = &#123;</div><div class="line">		<span class="comment">// 列表模块</span></div><div class="line">		list: &#123;</div><div class="line">			<span class="attr">tpl</span>: ...,</div><div class="line">			...</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">// 评论框模块</span></div><div class="line">		box: &#123;</div><div class="line">			<span class="attr">tpl</span>: ...,</div><div class="line">			...</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">// 顶部登录状态栏</span></div><div class="line">		signBar: &#123;</div><div class="line">			<span class="attr">tpl</span>: ...,</div><div class="line">			...</div><div class="line">		&#125;,</div><div class="line">		... <span class="comment">// 其他模块视图</span></div><div class="line">	&#125;;</div><div class="line">	...</div><div class="line">&#125;)(JELON);</div></pre></td></tr></table></figure>
<p>视图部分的代码组织好之后，根据 GitHub 提供的各种 API，我们将其封装到 Requests 里面去，组织如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></div><div class="line"><span class="keyword">var</span> JELON = JELON || &#123;&#125;;</div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">JL</span>) </span>&#123;</div><div class="line">	...</div><div class="line">	JL.Requests = &#123;</div><div class="line">		<span class="comment">// 根据 label 获取 issue 编号</span></div><div class="line">		getIssueNumberByLabel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 创建 issue</span></div><div class="line">		createIssue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 根据 issue 编号获取评论列表</span></div><div class="line">		getCommentListByIssueNumber: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 根据评论 ID 获取 reactions （即点赞数据）</span></div><div class="line">		getReactionsByCommentId: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// markdown 解析</span></div><div class="line">		markdown: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 通过 code 获取 access_token</span></div><div class="line">		getAccessToken: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 利用 access_token 去获取 GitHub 用户信息</span></div><div class="line">		getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 创建评论</span></div><div class="line">		createComment: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 创建 reactions （点赞）</span></div><div class="line">		createReaction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line">	&#125;;</div><div class="line">	...</div><div class="line">&#125;)(JELON);</div></pre></td></tr></table></figure>
<p>接下来是封装事件操作，我们将其封装到 Actions 里面去，代码组织如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为了减少全局变量，整个网站就暴露一个全局变量 JELON</span></div><div class="line"><span class="keyword">var</span> JELON = JELON || &#123;&#125;;</div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">JL</span>) </span>&#123;</div><div class="line">	...</div><div class="line">	JL.Actions = &#123;</div><div class="line">		<span class="comment">// 初始加载，如列表、登录状态等</span></div><div class="line">		init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 登出操作</span></div><div class="line">		signOut: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 列表翻页跳转</span></div><div class="line">		pageJump: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 编辑预览</span></div><div class="line">		editPreviewSwitch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 提交评论操作</span></div><div class="line">		postComment: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;,</div><div class="line">		<span class="comment">// 点赞操作</span></div><div class="line">		like: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line">	&#125;;</div><div class="line">	...</div><div class="line">&#125;)(JELON);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文只是介绍如何基于 github issues 实现第三方评论系统，对于 Hexo 介绍，本文并不打算详述，如果有童鞋之前还没有了解 Hexo 的，可以先看一下之前文章《&lt;a href=&quot;http://jelon.top/posts/start-
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitHub issue" scheme="http://jelon.top/tags/gitHub-issue/"/>
    
      <category term="第三方评论框" scheme="http://jelon.top/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%AF%84%E8%AE%BA%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>MAC 下修改 MySQL 初始密码的方法</title>
    <link href="http://jelon.top/posts/set-mysql-initial-password-on-mac/"/>
    <id>http://jelon.top/posts/set-mysql-initial-password-on-mac/</id>
    <published>2017-05-17T14:24:16.000Z</published>
    <updated>2017-05-17T15:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里只介绍输入命令行方法。</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>苹果 -&gt; 系统偏好设置 -&gt; MySQL，进入 MySQL 状态信息页面，关闭 MySQL 服务（点击 “Stop MySQL Server” 按钮）。</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>进入终端输入：<code>cd /usr/local/mysql/bin/</code>；<br>回车后，登录管理员权限，输入命令行 <code>sudo su</code>；</p>
<p>回车后输入以下命令来禁止 MySQL 验证功能 <code>./mysqld_safe --skip-grant-tables &amp;</code>；<br>回车后，MySQL 会自动重启（偏好设置中 MySQL 的状态会变成 running）。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>接下来，输入命令 <code>./mysql</code>；</p>
<p>回车后，输入命令 <code>FLUSH PRIVILEGES</code>；</p>
<p>回车后，输入命令 <code>SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;你的新密码&#39;)</code>。</p>
<p>至此，密码修改完成，可以成功登录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里只介绍输入命令行方法。&lt;/p&gt;
&lt;h3 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h3&gt;&lt;p&gt;苹果 -&amp;gt; 系统偏好设置 -&amp;gt; MySQL，进入 MySQL 状态信息页面，关
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="http://jelon.top/tags/Mac/"/>
    
      <category term="MySQL" scheme="http://jelon.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>小程序项目小结</title>
    <link href="http://jelon.top/posts/summary-of-mini-program/"/>
    <id>http://jelon.top/posts/summary-of-mini-program/</id>
    <published>2017-03-16T09:17:45.000Z</published>
    <updated>2017-04-22T16:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候，一屋子的人，包括前端、后端在内的各种不能做。经过了几番折腾，后面不知道开了多少次会，最后产品本打算做的两个业务场景，砍掉了其中一个，留了一个，也就是今天我要总结的东西 —- 结合日历实现会议室预订微信小程序产品需求。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>首先，看一下需求列表。功能清单大概如下3点：</p>
<ul>
<li><p>小程序首页可以根据日期查看会议订满和可预订状态；</p>
</li>
<li><p>可以查看会议室预订情况，在空闲时段可以预订会议室；</p>
</li>
<li><p>预订会议室后，提供集中查看页面，查看自己预订的所有会议室。</p>
</li>
</ul>
<p>此外，还有一个比较重要的功能点也就是登录功能：包括绑定账号登录，以及登录态的维护。当初评审的时候，没有把登录功能加入到工作量里面，事实上，登录功能也一点儿不比其他功能要简单。</p>
<p>需求整体流程图大概如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/1.png" alt="主要流程" width="400"></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>根据需求以及UI设计，我们把页面分成了登录页、我的（用户中心）、会议室列表页面、会议室预订页面、预订成功页面、我的预订六个模块页面以及其他公共方法模块。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/2.png" alt="项目结构" width="500"></p>
<h3 id="主要模块分解"><a href="#主要模块分解" class="headerlink" title="主要模块分解"></a>主要模块分解</h3><p><strong>会议室列表模块</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/3.png" alt="会议室列表页" width="300"></p>
<p>会议室列表页面主要包含两个部分，头部的滑动日历组件，以及内容部分的会议室列表。</p>
<p><strong>预订页面模块</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/4.png" alt="预订页面-可预订" width="300"></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/5.png" alt="预订页面-已失效" width="300"></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/9.png" alt="预订页面" width="300"></p>
<p>预订会议室包含当前会议室预订的列表、预订两个部分。根据底部预订按钮可以分为三种情况，可预订、已订满（截图没有）、已失效；会议室预订的最小粒度为30分钟。</p>
<ul>
<li><p>可预订：说明当天该会议室至少有30分钟的时间段是可以预订，提供预订按钮；</p>
</li>
<li><p>已订满：说明当天已经订满或者不可以在预订了，不提供预订按钮；</p>
</li>
<li><p>已失效：比如，我今天打开昨天的会议室，就是已失效会议室，不提供预订按钮。</p>
</li>
</ul>
<p><strong>登录模块</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/6.png" alt="登录页面" width="350"></p>
<p>登录分为手机号登录和邮箱账号登录。</p>
<h3 id="重点实现"><a href="#重点实现" class="headerlink" title="重点实现"></a>重点实现</h3><p><strong>会议室列表日历组件</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/8.png" alt="登录页面" width="300"></p>
<p>会议室列表页面模块页面重点的部分就是头部这个日历组件，所以有必要重点讲一下这个组件的实现流程。虽然小程序，有很多很好看并且也很好用的组件，但是像头部这种滑动日历组件小程序肯定是没有的，所以只能自己去写一个，实现起来其实也不难，主要用到小程序里面的 touchstart、touchmove、touchend 以及 touchcancel（防止滑动时遇到突然来电话等情况） 事件（当然这4个事件也是 w3c 里面的事件）。关于这个日历组件的实现思路大概如下：</p>
<ol>
<li><p><em>初始化单元格</em> 这个日历组件总共有15个单元，虽然展示在我们面前的只有5个，实际上在这5个单元格的左边和右边都分别有5个看不到的日历单元格；</p>
</li>
<li><p><em>填充单元内容</em> 接下来就是填充着15个单元格里面的日期以及星期，应该如何计算？其实，只需要获取今天00点00分时的时间戳，然后通过加减 n（其他日期与今天的差值） 个 86400000 毫秒即可，这个 86400000 毫秒就是两天之间的时间戳只差，比如3月16日00时00分与3月15日00时00分之间刚好相差 86400000 毫秒；</p>
</li>
<li><p><em>计算宽度</em> 每个单元格宽度为五分之一屏幕宽度；</p>
</li>
<li><p><em>日历组件居中</em> 为了保证第七个单元格居中，也就是让这中间这个单元格选中，组件容器向左负偏移一个屏幕宽度距离。<code>transiform: translate(-SCREENWIDTHpx, 0)</code>；</p>
</li>
<li><p><em>向左滑动处理</em> 计算向左滑动的距离，设置组件容器的偏移量；</p>
</li>
<li><p><em>向右滑动处理</em> 计算向右滑动距离，设置组件容器的偏移量；</p>
</li>
<li><p><em>滑动结束</em> 当滑动结束，根据最终滑动的距离计算向左或向右滑动了多少天，来选中最终的日期，然后根据这个日期重新渲染单元格；</p>
</li>
<li><p><em>滑动取消</em> 对于滑动取消这种情况，复位组件，即选中今天。</p>
</li>
</ol>
<p><strong>登录态维护</strong></p>
<p>登录时序图</p>
<p><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/login.png?t=201733" alt="登录态维护"></p>
<p>参考以上的微信提供的登录时序图，以及结合 139 邮箱小程序的登录特征，后台后台提供两个接口：一个是用户第一次登录（ sid、rmKey 等登录信息不存在）时所调用的登录接口；另外一个则是，用户之前已经登录过（小程序缓存 Storage 里面已存在 sid、rmKey等登录信息）时所调用的免登录接口。</p>
<p>流程图如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/summary-of-mini-program/7.png" alt="登录页面" width="450"></p>
<p>代码实现如下：</p>
<p>登录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">doLogin: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (_this.data.phoneLogin &amp;&amp; !_this.data.phoneNumber.trim()) &#123;</div><div class="line">      wx.showModal(&#123;</div><div class="line">        <span class="attr">title</span>     : <span class="string">'139邮箱提示'</span>,</div><div class="line">        <span class="attr">content</span>   : <span class="string">'请输入手机号'</span>,</div><div class="line">        <span class="attr">showCancel</span>: <span class="literal">false</span></div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (_this.data.mailLogin &amp;&amp; !_this.data.mailName.trim()) &#123;</div><div class="line">      wx.showModal(&#123;</div><div class="line">        <span class="attr">title</span>     : <span class="string">'139邮箱提示'</span>,</div><div class="line">        <span class="attr">content</span>   : <span class="string">'请输入邮箱账号'</span>,</div><div class="line">        <span class="attr">showCancel</span>: <span class="literal">false</span></div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 登录成功，跳转至用户中心</span></div><div class="line">    wx.login(&#123;</div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> code  = res.code;</div><div class="line">        <span class="keyword">if</span> (code) &#123;</div><div class="line">          <span class="keyword">if</span> (_this.data.phoneLogin) &#123;</div><div class="line">            _this.loginFunc(&#123;</div><div class="line">              <span class="attr">code</span>        : code,</div><div class="line">              <span class="attr">userNumber</span>  : _this.data.phoneNumber.trim(),</div><div class="line">              <span class="attr">password</span>    : _this.data.smsCode   </div><div class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</div><div class="line">              <span class="keyword">if</span> (json.statusCode === <span class="number">200</span>) &#123;</div><div class="line">                  <span class="keyword">var</span> data = json.data;</div><div class="line">                  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'string'</span>) &#123;</div><div class="line">                    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">                  &#125;</div><div class="line">                  <span class="comment">// 登录成功，跳转至用户中心</span></div><div class="line">                  <span class="keyword">if</span> (data &amp;&amp; data.code === <span class="string">'S_OK'</span>) &#123;</div><div class="line">                    wx.setStorage(&#123;</div><div class="line">                      <span class="attr">key</span> : <span class="string">'sid'</span>,</div><div class="line">                      <span class="attr">data</span>: data.sid</div><div class="line">                    &#125;);</div><div class="line">                    <span class="comment">// 登录成功，跳转至用户中心</span></div><div class="line">                    wx.switchTab(&#123;</div><div class="line">                      <span class="attr">url</span>    : <span class="string">'../../pages/conference/meetingRoom'</span>,</div><div class="line">                      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'登录成功！'</span>);</div><div class="line">                      &#125;</div><div class="line">                    &#125;);</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;);</div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.data.mailLogin) &#123;</div><div class="line">            _this.loginFunc(&#123;</div><div class="line">              <span class="attr">code</span>        : code,</div><div class="line">              <span class="attr">userNumber</span>  : _this.data.mailName.trim(),</div><div class="line">              <span class="attr">password</span>    : _this.data.password   </div><div class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (json.statusCode === <span class="number">200</span>) &#123;</div><div class="line">                  <span class="keyword">var</span> data = json.data;</div><div class="line">                  <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'string'</span>) &#123;</div><div class="line">                    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">                  &#125;</div><div class="line">                  <span class="comment">// 登录成功，跳转至用户中心</span></div><div class="line">                  <span class="keyword">if</span> (data &amp;&amp; data.code === <span class="string">'S_OK'</span>) &#123;</div><div class="line">                    wx.setStorage(&#123;</div><div class="line">                      <span class="attr">key</span> : <span class="string">'sid'</span>,</div><div class="line">                      <span class="attr">data</span>: data.sid</div><div class="line">                    &#125;);</div><div class="line">                    wx.setStorage(&#123;</div><div class="line">                      <span class="attr">key</span> : <span class="string">'rmKey'</span>,</div><div class="line">                      <span class="attr">data</span>: data.rmKey</div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">                    <span class="comment">// 登录成功，跳转至用户中心</span></div><div class="line">                    wx.switchTab(&#123;</div><div class="line">                      <span class="attr">url</span>    : <span class="string">'../../pages/conference/meetingRoom'</span>,</div><div class="line">                      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'登录成功！'</span>);</div><div class="line">                      &#125;</div><div class="line">                    &#125;);</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>免登陆</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">  <span class="comment">/** </span></div><div class="line">   * 免登录操作 </div><div class="line">   */</div><div class="line">  freeLoginAction: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sid   = wx.getStorageSync(<span class="string">'sid'</span>);</div><div class="line">    <span class="keyword">var</span> code  = wx.getStorageSync(<span class="string">'code'</span>);</div><div class="line">    <span class="keyword">var</span> rmKey = wx.getStorageSync(<span class="string">'rmKey'</span>);</div><div class="line">    <span class="keyword">if</span> (sid &amp;&amp; code &amp;&amp; rmKey &amp;&amp; !<span class="regexp">/MP_USER_####/</span>.test(sid)) &#123;</div><div class="line">      <span class="keyword">this</span>.freeLogin(&#123;</div><div class="line">        <span class="attr">sid</span> : sid,</div><div class="line">        <span class="attr">code</span>: code</div><div class="line">      &#125;, rmKey, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</div><div class="line">          <span class="keyword">var</span> data = res.data;</div><div class="line">          <span class="comment">// 只有成功的时候才传回调</span></div><div class="line">          <span class="keyword">if</span> (data.code === <span class="string">'S_OK'</span>) &#123;</div><div class="line">            wx.setStorageSync(<span class="string">'sid'</span>, data.sid);</div><div class="line">            data.rmKey &amp;&amp; wx.setStorageSync(<span class="string">'rmKey'</span>, data.rmKey)</div><div class="line">            callback &amp;&amp; callback(res);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果还没登录，缓存中的 sid 为空或者无效，跳转至登录页</span></div><div class="line">      wx.navigateTo(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'../../pages/login/login'</span></div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 免登录</div><div class="line">   * @param  &#123;Object&#125;    options   请求参数</div><div class="line">   * @param  &#123;String&#125;    rmKey     RMKEY</div><div class="line">   * @param  &#123;Function&#125;  callback  回调</div><div class="line">   * @return void(0)</div><div class="line">   */</div><div class="line">  freeLogin: <span class="function"><span class="keyword">function</span> (<span class="params">options, rmKey, callback</span>) </span>&#123;</div><div class="line">    options = util.json2xml(options);</div><div class="line">    wx.request(&#123;</div><div class="line">      <span class="attr">url</span>    : <span class="string">'https://xxx.cn'</span> + <span class="string">'/weixin/s?func=weixin:freeLoginMiniProgram'</span>,</div><div class="line">      <span class="attr">data</span>   : options,</div><div class="line">      <span class="attr">method</span> : <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">header</span> : &#123;</div><div class="line">        <span class="string">'Cookie'</span>      : <span class="string">'RMKEY='</span> + rmKey,</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/xml'</span></div><div class="line">      &#125;, </div><div class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (res) &#123;</div><div class="line">          callback &amp;&amp; callback(res);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">fail</span>   : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        callback &amp;&amp; callback(err);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul>
<li>小程序使用 Mustache 语法（双大括号）将变量包起来的数据绑定，不支持比较复杂的运算，哪怕稍微有点复杂，如：</li>
</ul>
<p>支持</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; a + b&#125;&#125;</div></pre></td></tr></table></figure>
<p>不支持</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; a + b + c &#125;&#125;</div></pre></td></tr></table></figure>
<p>因此，如果涉及到数据的计算，最好先在 js 里面计算好了，在绑定到 View 层。</p>
<ul>
<li>小程序不支持 Cookie。小程序使用框架提供的 <code>wx.request</code> 接口发送 https 请求不会携带 Cookie 信息，传统webserver的会话管理能力 session（比如邮箱会话校验所使用的 RMKEY ）在微信小程序无法直接使用，在这点上微信小程序更像CS架构的开发模式，开发者需要自己实现会话管理功能。</li>
</ul>
<p>我们的解决方法是将 RMKEY 放到请求的头部新建字段带给后台。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">subMeetingRoom: <span class="function"><span class="keyword">function</span> (<span class="params">options, rmKey, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> sid   = wx.getStorageSync(<span class="string">'sid'</span>);</div><div class="line">	<span class="keyword">var</span> rmKey = wx.getStorageSync(<span class="string">'rmKey'</span>); </div><div class="line">	options   = util.json2xml(options);</div><div class="line">	wx.request(&#123;</div><div class="line">	  <span class="attr">url</span>    : <span class="string">'https://xxx.com'</span> + <span class="string">'/calendar/s?func=calendar:subMeetingRoom&amp;sid='</span> + sid,</div><div class="line">	  <span class="attr">data</span>   : options,</div><div class="line">	  <span class="attr">method</span> : <span class="string">'POST'</span>,</div><div class="line">	  <span class="attr">header</span> : &#123;</div><div class="line">	    <span class="string">'content-type'</span>: <span class="string">'application/xml'</span>,</div><div class="line">	    <span class="string">'Cookie'</span>      : <span class="string">'RMKEY='</span> + rmKey  <span class="comment">// 请求创建一个 Cookie 字段</span></div><div class="line">	  &#125;,</div><div class="line">	  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">	    <span class="keyword">if</span> (res) &#123;</div><div class="line">	      callback &amp;&amp; callback(res);</div><div class="line">	    &#125;</div><div class="line">	  &#125;,</div><div class="line">	  <span class="attr">fail</span>   : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">	    callback &amp;&amp; callback(err);</div><div class="line">	  &#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>小程序长度单位 rpx 和 px 的转换，有些情况只能到真机里面去看；如果使用微信开发工具的话，建议切换成 iPhone 6 模式。</li>
</ul>
<p><img src="https://dn-coding-net-production-pp.qbox.me/ac2a2834-4bf0-44c1-84aa-ece1f6abfeca.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1" alt="rpx"></p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/a814a870-e0d9-47f2-84e7-ca49b1b80996.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1" alt="rpx"></p>
<p><img src="https://dn-coding-net-production-pp.qbox.me/26f9bd25-2e5d-4d07-aabf-ae19d00f1dfe.jpg?imageView2/2/w/500/h/500&amp;imageMogr2/format/jpg/ignore-error/1" alt="rpx"></p>
<p>以上是在 Windows 下使用的微信开发者工具返回来的像素比，iPhone 4s 的像素比居然的也是 2，很明显不靠谱。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>站在开发者的角度看，</p>
<ul>
<li><p>小程序入手简单，也正是因为简单，所以不适合做一些场景比较复杂的应用；</p>
</li>
<li><p>很多组件小程序都已经帮你封装好了，简洁、也好看；但是如果，你要自己去实现一些更加个性化的组件还是有点麻烦；</p>
</li>
<li><p>个人吐槽一下，微信开发者工具不太好用😁；</p>
</li>
<li><p>最后，有个疑问，现在小程序还火吗？🙃🙃</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这个项目已经提出来了好久，应该是在今年的一月份的时候，产品就已经提出了这个需求。想当初，小程序刚出来的时候，IT朋友圈经常会被刷屏，估计为了赶潮流，产品也想尝尝鲜，想出来要做一个跟邮箱相关的小程序。然而，要绑定邮箱业务到小程序，也不是想做就能做的，记得当时开评审会的时候
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="小程序" scheme="http://jelon.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="WeChat" scheme="http://jelon.top/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>基于 MongoDB 的博客系统 Schema 设计</title>
    <link href="http://jelon.top/posts/mongodb-blog-design/"/>
    <id>http://jelon.top/posts/mongodb-blog-design/</id>
    <published>2017-03-12T14:02:08.000Z</published>
    <updated>2017-06-18T13:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoDB 的博客系统，网上搜了一些资料，总结了以下 Schema 设计。</p>
<p>博客系统实现需要三张表：</p>
<ul>
<li><p>文章表</p>
</li>
<li><p>分类表</p>
</li>
<li><p>用户表</p>
</li>
</ul>
<h3 id="文章表"><a href="#文章表" class="headerlink" title="文章表"></a>文章表</h3><p>文章表包含了以下这些字段。</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名</th>
<th style="text-align:left">字段含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">文章的标题</td>
</tr>
<tr>
<td style="text-align:left">content</td>
<td style="text-align:left">文章的内容</td>
</tr>
<tr>
<td style="text-align:left">category</td>
<td style="text-align:left">文章的分类</td>
</tr>
<tr>
<td style="text-align:left">author</td>
<td style="text-align:left">文章的作者</td>
</tr>
<tr>
<td style="text-align:left">slug</td>
<td style="text-align:left">文章的url(如果是中文的话，给其起一个英文的名称，说是有利于搜索引擎的优化，有点不大明白)</td>
</tr>
<tr>
<td style="text-align:left">published</td>
<td style="text-align:left">文章是否发布</td>
</tr>
<tr>
<td style="text-align:left">meta</td>
<td style="text-align:left">搜集这个文章被赞了多少次，被踩了多少次。</td>
</tr>
<tr>
<td style="text-align:left">comments</td>
<td style="text-align:left">文章的评论</td>
</tr>
<tr>
<td style="text-align:left">created</td>
<td style="text-align:left">文章的创建时间</td>
</tr>
</tbody>
</table>
<p>实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</div><div class="line">Schema       = mongoose.Schema;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> PostSchma = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">title</span>    : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">content</span>  : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">category</span> : &#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">'Category'</span> &#125;,<span class="comment">//作为外键</span></div><div class="line">    author   : &#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">'User'</span> &#125;,   <span class="comment">//作为外键</span></div><div class="line">    slug     : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">published</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;,</div><div class="line">    <span class="attr">meta</span>     : &#123; <span class="attr">type</span>: Schema.Types.Mixed &#125;,</div><div class="line">    <span class="attr">comments</span> : [ Schema.Types.Mixed ],</div><div class="line">    <span class="attr">created</span>  : &#123; <span class="attr">type</span>: <span class="built_in">Date</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">mongoose.model(<span class="string">'Post'</span>, PostSchema);</div></pre></td></tr></table></figure>
<h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><p>用户表主要由以下字段构成。</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名</th>
<th style="text-align:left">字段含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">用户名</td>
</tr>
<tr>
<td style="text-align:left">email</td>
<td style="text-align:left">邮箱地址</td>
</tr>
<tr>
<td style="text-align:left">password</td>
<td style="text-align:left">密码</td>
</tr>
<tr>
<td style="text-align:left">created</td>
<td style="text-align:left">创建时间</td>
</tr>
</tbody>
</table>
<p>实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</div><div class="line"> Schema      = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> md5      = <span class="built_in">require</span>(<span class="string">'md5'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>    : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">email</span>   : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">password</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">created</span> : &#123; <span class="attr">type</span>: <span class="built_in">Date</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">mongoose.model(<span class="string">'User'</span>, UserSchema);</div></pre></td></tr></table></figure>
<h3 id="分类表"><a href="#分类表" class="headerlink" title="分类表"></a>分类表</h3><p>分类表主要有以下字段构成。</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名</th>
<th style="text-align:left">字段含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">分类名称</td>
</tr>
<tr>
<td style="text-align:left">slug</td>
<td style="text-align:left">固定链接</td>
</tr>
<tr>
<td style="text-align:left">created</td>
<td style="text-align:left">创建时间</td>
</tr>
</tbody>
</table>
<p>实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</div><div class="line">Schema       = mongoose.Schema;</div><div class="line">		</div><div class="line"><span class="keyword">var</span> CategorySchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>   : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">slug</span>   : &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">created</span>: &#123; <span class="attr">type</span>: <span class="built_in">Date</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">mongoose.model(<span class="string">'Category'</span>, CategorySchema);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择 MongoDB 作为数据库的 Node 开发者，避免不了 MongoDB 数据库设计，而 Mongoose 是 Mongodb 和 Node.js 之上基于 Schema 的数据建模和解决方案，提供类型转换，字段校验，查询构造等功能。最近自己想做一个基于 MongoD
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mongoose" scheme="http://jelon.top/tags/Mongoose/"/>
    
      <category term="Node.js" scheme="http://jelon.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下 MongoDB 及其客户端管理工具的安装和使用</title>
    <link href="http://jelon.top/posts/mongodb-for-mac/"/>
    <id>http://jelon.top/posts/mongodb-for-mac/</id>
    <published>2017-02-17T13:18:28.000Z</published>
    <updated>2017-02-18T02:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-MongoDB"><a href="#什么是-MongoDB" class="headerlink" title="什么是 MongoDB"></a>什么是 MongoDB</h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为Web 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<h3 id="MongoDB-的特点"><a href="#MongoDB-的特点" class="headerlink" title="MongoDB 的特点"></a>MongoDB 的特点</h3><ul>
<li>【JSON风格文件的形式，面向文档存储：数据存储】 MongoDB的提供了一个面向文档存储，操作起来比较简单和容易；</li>
<li><p>【对任何属性可索引】 通过设置任何属性的索引 (如：FirstName=”Sameer”, Address=”8 Gandhi Road”)来实现更快的排序；</p>
</li>
<li><p>【复制和高可用性】 通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性；</p>
</li>
<li><p>【自动分片】 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片；</p>
</li>
<li><p>【丰富的查询】 Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组；</p>
</li>
<li><p>【快速就地更新】 MongoDb 使用 update() 命令可以实现替换完成的文档（数据）或者一些指定的数据字段；</p>
</li>
<li><p>Mongodb 中的 Map/reduce 主要是用来对数据进行批量处理和聚合操作；</p>
</li>
<li><p>Map 和 Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理；</p>
</li>
<li><p>Map函数和Reduce函数是使用 Javascript 编写的，并可以通过 db.runCommand 或mapreduce 命令来执行 MapReduce 操作；</p>
</li>
<li><p>GridFS是 MongoDB 中的一个内置功能，可以用于存放大量小文件；</p>
</li>
<li><p>MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可；</p>
</li>
<li><p>MongoDB 支持各种编程语言: RUBY，PYTHON，JAVA，C++，PHP，C#，Node.js 等多种语言。</p>
</li>
</ul>
<h3 id="MongoDB-适用场景"><a href="#MongoDB-适用场景" class="headerlink" title="MongoDB 适用场景"></a>MongoDB 适用场景</h3><ul>
<li><p>大数据</p>
</li>
<li><p>内容管理和交付</p>
</li>
<li><p>移动和社交基础设施</p>
</li>
<li><p>用户数据管理</p>
</li>
<li><p>数据平台</p>
</li>
</ul>
<h3 id="Mac-下-MongoDB-安装"><a href="#Mac-下-MongoDB-安装" class="headerlink" title="Mac 下 MongoDB 安装"></a>Mac 下 MongoDB 安装</h3><p>方法一，通过终端下载安装；</p>
<p><em>with Homebrew</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Update Homebrew’s package database</span></div><div class="line">brew update</div><div class="line">	</div><div class="line"><span class="comment"># Install MongoDB</span></div><div class="line"><span class="comment"># Install the MongoDB Binaries</span></div><div class="line">brew install mongodb </div><div class="line"><span class="comment"># Install the MongoDB Binaries with TLS/SSL Support</span></div><div class="line">brew install mongodb --with-openssl</div><div class="line"><span class="comment"># Install the Latest Development Release of MongoDB</span></div><div class="line">brew install mongodb --devel</div></pre></td></tr></table></figure>
<p><em>Install MongoDB Community Edition Manually</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz &gt; mongodb.tgz</div></pre></td></tr></table></figure>
<p>方法二，直接浏览器登录官网下载解压即可；</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/mongodb-for-mac/1.jpeg" alt="MongoDB 官网"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>打开终端，切换至 mongodb/bin 目录下，输入 <code>./mongod</code>，如下图所示开启服务。</li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/mongodb-for-mac/2.png" alt="开启服务"></p>
<ul>
<li>打开另外一个终端，切换至 mongodb/bin 目录下，输入 <code>./mongo</code> 来允许输入 mongdb shell。</li>
</ul>
<h3 id="MongoDB-常用-shell-命令"><a href="#MongoDB-常用-shell-命令" class="headerlink" title="MongoDB 常用 shell 命令"></a>MongoDB 常用 shell 命令</h3><ul>
<li>use 命令</li>
</ul>
<p>MongoDB use DATABASE_NAME 用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。</p>
<ul>
<li>dropDatabase() 方法</li>
</ul>
<p>MongoDB db.dropDatabase() 命令是用来删除一个现有的数据库。<br>dropDatabase() 命令的基本语法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure>
<ul>
<li>drop() 方法</li>
</ul>
<p>MongoDB 的 db.collection.drop() 是用来从数据库中删除一个集合。</p>
<ul>
<li>insert() 方法</li>
</ul>
<p>要插入数据到 MongoDB 集合，需要使用 MongoDB 的 insert() 或 save() 方法。</p>
<ul>
<li>find() 方法</li>
</ul>
<p>要从MongoDB 查询集合数据，需要使用MongoDB 的 find() 方法。</p>
<ul>
<li>pretty() 方法</li>
</ul>
<p>结果显示在一个格式化的方式，可以使用 pretty() 方法.</p>
<ul>
<li>limit() 方法</li>
</ul>
<p>要限制 MongoDB 中的记录，需要使用 limit() 方法。 limit() 方法接受一个数字型的参数，这是要显示的文档数。</p>
<p><code>limit()</code> 方法的基本语法如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find().limit(NUMBER)</div></pre></td></tr></table></figure>
<h3 id="Mac-下客户端管理工具-—-Toad"><a href="#Mac-下客户端管理工具-—-Toad" class="headerlink" title="Mac 下客户端管理工具 —- Toad"></a>Mac 下客户端管理工具 —- Toad</h3><ul>
<li>简介</li>
</ul>
<p>Toad 是一个强大的生产力解决方案，简化了 OS X 用户的数据库管理。 它使您能够在自动化开发过程构建高质量的数据库应用程序。Toad 界面很流畅，能使你轻松切换任务。 此外，它不止支持 MongoDB，还支持 Oracle，MySQL 和 PostgreSQL。</p>
<ul>
<li>安装</li>
</ul>
<p>打开 App Store ，搜索 Toad（图标为一只蛤蟆），直接安装即可。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/mongodb-for-mac/3.png" alt="Toad"></p>
<ul>
<li>使用</li>
</ul>
<p>安装好之后打开 Toad，在事先已经开启 MongoDB 服务的前提下，输入以下内容，进行数据库连接。</p>
<p>连接：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/mongodb-for-mac/4.png" alt="Toad"></p>
<p>工具演示：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/5.gif" alt="演示"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://www.mongodb.com/" target="_blank" rel="external">https://www.mongodb.com/</a></li>
<li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></li>
<li><a href="https://segmentfault.com/a/1190000002547229" target="_blank" rel="external">https://segmentfault.com/a/1190000002547229</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-MongoDB&quot;&gt;&lt;a href=&quot;#什么是-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;什么是 MongoDB&quot;&gt;&lt;/a&gt;什么是 MongoDB&lt;/h3&gt;&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac OSX" scheme="http://jelon.top/tags/Mac-OSX/"/>
    
      <category term="Node.js" scheme="http://jelon.top/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="http://jelon.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>139邮箱图形化前端构建小工具</title>
    <link href="http://jelon.top/posts/139mailbuildtool/"/>
    <id>http://jelon.top/posts/139mailbuildtool/</id>
    <published>2016-12-19T05:42:33.000Z</published>
    <updated>2016-12-30T10:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景目的"><a href="#背景目的" class="headerlink" title="背景目的"></a>背景目的</h3><p>自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机子是32位6G内存）来测试，之前构建全量包要花费将近 20 分钟，如今只需要 4 分钟不到；另外 gulp 是基于 node.js 的，对前端开发来说是相当友好的。但是，还是有点美中不足：第一，比如像我这样的前端小白，我对命令行不是很敏感，甚至我不太喜欢敲一串串的命令行去执行一个任务，我希望能有一个图形化界面工具，能点点按钮什么的就可以完成一个构建任务，那该多爽。第二，目前的 gulp 构建还不支持自定义构建，这个自定义构建其实就是，比如说，我想打包某个目标文件（这个文件可能由好几个文件合并压缩而成），只要选择了这个文件的文件名，然后点击按钮，就可以帮你执行的任务，帮你构建好这个文件，甚至可以帮你部署到资源服务器上。</p>
<p>简单的说就是：</p>
<ul>
<li>需要一个构建工具图形化界面</li>
<li>需要自定义构建功能</li>
</ul>
<p>基于以上两个目的，所以就做了一个这样的图形化前端构建小工具。</p>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><ul>
<li><strong>全量构建</strong></li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/1.png" alt="全量构建效果图"></p>
<ul>
<li><strong>JavaScript 增量构建</strong></li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/2.png" alt="全量构建效果图"></p>
<ul>
<li><strong>CSS 增量构建</strong></li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/3.png" alt="全量构建效果图"></p>
<ul>
<li><strong>HTML 增量构建</strong></li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/4.png" alt="全量构建效果图"></p>
<h3 id="运用技术"><a href="#运用技术" class="headerlink" title="运用技术"></a>运用技术</h3><ul>
<li><strong>基于现有的 gulp 构建</strong></li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/5.png" alt="基于现有的 gulp 构建"></p>
<p>目前的 gulp 构建通过命令行可执行独立任务任务有</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp  <span class="comment"># 构建全量包</span></div><div class="line">gulp deploy  <span class="comment"># 构建全量包并自动部署到资源服务器</span></div><div class="line">gulp uploadStaticFiles <span class="comment"># 部署静态资源到服务器</span></div><div class="line">gulp restartNodeServer <span class="comment"># 部署并重启测试线的 node 服务</span></div><div class="line">gulp watch <span class="comment"># 实时代码监听</span></div></pre></td></tr></table></figure>
<p>说明：以上的命令除了部署并重启测试线的 node 服务之外，其他的任务都将加到本次的小工具上。</p>
<ul>
<li><strong>Electron</strong> </li>
</ul>
<p>最重要的东西要来了，它就是 Electron。在这之前，大家应该都有听说过 Node-Webkit （后期改名 NW.js）。NW.js 允许您直接从 DOM 层调用所有 Node.js 模块，并允许使用所有Web技术编写 PC 端的应用程序。而 Electron 也差不多类似这样的一种工具或者说框架。</p>
<p>Electron 是允许使用 JavaScript，HTML 和 CSS 等 Web 技术创建 PC 应用程序的框架。 它负责跟系统打交道，使得开发者可以更加专注于应用本身。Electron 官网 <a href="http://electron.atom.io/" target="_blank" rel="external">http://electron.atom.io/</a> 。</p>
<p>Electron 的主要特点有：</p>
<ol>
<li><p><em>Web 技术。</em> Electron 是基于 Chromium 和 Node.js，因此您可以使用HTML，CSS和JavaScript构建应用程序。</p>
</li>
<li><p><em>开源。</em> Electron是由GitHub和活跃的贡献者社区维护的开源项目。</p>
</li>
<li><p><em>跨平台。</em> 兼容 Mac，Windows 和 Linux 系统，Electron 应用程序可在三个平台上构建和运行。</p>
</li>
</ol>
<p>Electron 快速入手：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Clone the Quick Start repository</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</div><div class="line"></div><div class="line"><span class="comment"># Go into the repository</span></div><div class="line">$ <span class="built_in">cd</span> electron-quick-start</div><div class="line"></div><div class="line"><span class="comment"># Install the dependencies and run</span></div><div class="line">$ npm install &amp;&amp; npm start</div></pre></td></tr></table></figure>
<p>我为什么要用 Electron 而不用 NW.js ？</p>
<ol>
<li><p>好奇心的我，想接触一下新事物；</p>
</li>
<li><p>剩下的理由主要是受了知乎一些吐槽的影响。《<a href="https://www.zhihu.com/question/38854224?sort=created" target="_blank" rel="external">用Nodejs开发桌面应用。NW.js 和 Electron 各有什么优缺点，你选择哪个？</a>》 </p>
</li>
</ol>
<p>有哪些公司或者 App 在用 Electron？</p>
<p>其实，Electron 已经被微软，Facebook，Slack 和 Docker 等公司用来创建应用程序。成功案例有很多，比较有代表性的有如下这些：</p>
<ol>
<li><p>Atom 编辑器</p>
</li>
<li><p>Slack（那个独角兽公司）</p>
</li>
<li><p>Visual Studio Code</p>
</li>
<li><p>WordPress 桌面版</p>
</li>
</ol>
<ul>
<li><strong>Bootstrap</strong></li>
</ul>
<p>UI 界面用的是 Bootstrap，简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</p>
<ul>
<li><strong>Q.js</strong></li>
</ul>
<p>由于本图形构建工具功能比较简单，所以想做一个单页面就好，但是又不想用像 vue 这样的框架，网上找了一下，发现 Q.js 这个路由框架。</p>
<p>Q.js 是一个炒鸡轻量的前端单页路由框架。官网地址是 <a href="http://mouto.org/#!54092" target="_blank" rel="external">http://mouto.org/#!54092</a>，Github 地址是 <a href="https://github.com/itorr/q.js" target="_blank" rel="external">https://github.com/itorr/q.js</a>。</p>
<p>Q.js 特点是轻量、快速、极简。为了更好的利用缓存以及更少的后端支援，Q.js放弃了 HTML5 State，通过#!格式的 url hach 重现了 url 路由功能。</p>
<ol>
<li><p>无 JavaScript 库依托，可随意搭配使用；</p>
</li>
<li><p>源代码不及百行压缩后 834byte ；</p>
</li>
<li><p>支持 IE6+ Chrome Safari FF （其实 Electron 算是很新的浏览器内核，已经没必要考虑这一点）；</p>
</li>
<li><p>未做情况判定，使用 Q.js 必然会注册 window.Q 。</p>
</li>
</ol>
<p>来一段简单的 <code>Hello, World</code> 来简单演示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	Q.reg('home', function () &#123;</div><div class="line">	  document.getElementById('m').innerHTML = 'Hello, World!';</div><div class="line">	&#125;);</div><div class="line">	Q.init(&#123;</div><div class="line">	  index: 'home' /* 首页地址 */</div><div class="line">	&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>打开例子后，浏览器会从 <code>http://simple.com/</code> 跳转到 <code>http://simple.com/#!home</code> ，并且在页面显示 Hello World。</p>
<h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><p>首先，我们整体看一下，整个应用的目录结构：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/139mailbuildtool/6.png" alt="项目结构"></p>
<p>在执行 gulp 各个任务，主要用了 node.js 的 child_process 进程模块的 spawn 方法。<code>spawn</code> 使用如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> spawn    = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</div><div class="line"><span class="keyword">const</span> gulpTask = spawn(<span class="string">'gulp'</span>, [ <span class="string">'default'</span> ]);</div></pre></td></tr></table></figure>
<p>对自定义构建，主要通过命令行传参的方式指定的 gulp 构建的 json 配置，从而实现文件的自定义构建，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前端获取选择的配置文件的文件名并以`,`号分隔</span></div><div class="line"><span class="comment">// 如 --fileConf=/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_birthday.html.pack.js.json,/Users/zdl/Documents/Projects/Mail139_iPad_F2010/trunk/src/buildNew/config/jsFiles/concat/calendar_calendar.html.pack.js.json</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> yargv = <span class="built_in">require</span>(<span class="string">'yargs'</span>).argv;</div><div class="line"><span class="keyword">var</span> fileConf = yargv.fileConf;</div></pre></td></tr></table></figure>
<ul>
<li><strong>全量构建</strong></li>
</ul>
<p>全量构建里面包含“构建全量包”、“构建并部署”、“构建并监听”三个任务。实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-- renders.js --</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 构建全量包</div><div class="line"> * @description  gulp default</div><div class="line"> */</div><div class="line">$E(<span class="string">'btnBuildGlobal'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  executeBuild(&#123;</div><div class="line">    <span class="attr">processingBarId</span>: <span class="string">'btnBuildGlobalProgress'</span>,</div><div class="line">    <span class="attr">processingName</span>: <span class="string">'构建全量包'</span>,</div><div class="line">    <span class="attr">command</span>: <span class="string">'gulp'</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 构建并部署</div><div class="line"> * @deacription gulp deploy</div><div class="line"> */</div><div class="line">$E(<span class="string">'btnBuildDeploy'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  executeBuild(&#123;</div><div class="line">    <span class="attr">processingBarId</span>: <span class="string">'btnBuildDeployProgress'</span>,</div><div class="line">    <span class="attr">processingName</span>: <span class="string">'构建并部署'</span>,</div><div class="line">    <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">    <span class="attr">args</span>: [ <span class="string">'deploy'</span> ]</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 构建并监听</div><div class="line"> * @description  gulp watch</div><div class="line"> */</div><div class="line">$E(<span class="string">'btnBuildWatch'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (_this.dataset.watching === <span class="string">'off'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (processingObject.processingGulp) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// 关闭其他线程的提示框</span></div><div class="line">    closeTips();</div><div class="line">    </div><div class="line">    processingObject.processingGulp = spawn(<span class="string">'gulp'</span>, [ <span class="string">'watch'</span> ], &#123;</div><div class="line">      <span class="attr">cwd</span>: config[$E(<span class="string">'btnSwitchRDlines'</span>).dataset[<span class="string">'switch'</span>]]</div><div class="line">    &#125;);</div><div class="line">    processingObject.processingName = <span class="string">'构建并监听'</span>;</div><div class="line">    processingObject.processingBarId = <span class="string">'btnBuildWatchProgress'</span>;</div><div class="line">    _this.innerHTML = <span class="string">'点击不监听'</span>;</div><div class="line">    _this.dataset.watching = <span class="string">'on'</span>;</div><div class="line">    $E(<span class="string">'btnBuildWatchProgress'</span>).style.width = <span class="string">'100%'</span>;</div><div class="line"></div><div class="line">    processingObject.processingGulp.stdout.on(<span class="string">'data'</span>, (data) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>);</div><div class="line">    &#125;);</div><div class="line">    processingObject.processingGulp.on(<span class="string">'close'</span>, (data) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`stdout close: <span class="subst">$&#123;data&#125;</span>`</span>);</div><div class="line">      <span class="keyword">if</span> (data === <span class="literal">null</span>) &#123;</div><div class="line">        _this.innerHTML = <span class="string">'构建并监听'</span>;</div><div class="line">        _this.dataset.watching = <span class="string">'off'</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_this.dataset.watching === <span class="string">'on'</span>) &#123;</div><div class="line">    _this.innerHTML = <span class="string">'构建并监听'</span>;</div><div class="line">    _this.dataset.watching = <span class="string">'off'</span>;</div><div class="line">    $E(<span class="string">'btnBuildWatchProgress'</span>).style.width = <span class="string">'0%'</span>;</div><div class="line"></div><div class="line">    showTips(<span class="string">'代码监听已取消！'</span>, <span class="string">'alert-danger'</span>);</div><div class="line">    killCurrentProcessing();</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><strong>JavaScript 自定义构建</strong></li>
</ul>
<p>JavaScript 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//-- renders.js --</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建JS</div><div class="line">   * @description gulp customBuildJs --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildJS'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'jsBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包的 js 文件！'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressJS'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'JS文件自定义构建'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildJs'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建并自动部署JS</div><div class="line">   * @description gulp customBuildAndDeployJs --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildDeployJS'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'jsBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包部署的 js 文件'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressJS'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'JS文件自定义构建并自动部署'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildAndDeployJs'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="comment">//-- gulpfile.js --</span></div><div class="line">  <span class="comment">// 自定义构建打包 js </span></div><div class="line"><span class="comment">// 参考：task uglifyJs</span></div><div class="line">gulp.task(<span class="string">'customBuildJs'</span>, [ <span class="string">'clean'</span>, <span class="string">'compileTsFiles'</span>, <span class="string">'updateJsConcatConfig'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`yargv.fileConf =&gt; <span class="subst">$&#123;yargv.fileConf&#125;</span>`</span>);</div><div class="line">    <span class="keyword">var</span> fileConf = yargv.fileConf;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> pump([</div><div class="line">        concatJsFiles(&#123;</div><div class="line">            <span class="attr">concatConfig</span>: fileConf.split(<span class="string">','</span>)</div><div class="line">         &#125;),</div><div class="line">        debug(&#123;<span class="attr">title</span>: <span class="string">"concating --&gt; "</span>&#125;),</div><div class="line">        <span class="comment">// sourcemaps.init(),</span></div><div class="line">        uglify(),</div><div class="line">        debug(&#123;<span class="attr">title</span>: <span class="string">"uglifying --&gt; "</span>&#125;),</div><div class="line">        <span class="comment">// sourcemaps.write("./"),</span></div><div class="line">        gulp.dest( path.join(destDir))</div><div class="line">    ]);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 自定义构建打包并部署 js</span></div><div class="line">gulp.task(<span class="string">'customBuildAndDeployJs'</span>, [ <span class="string">'customBuildJs'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> conn = ftp.create( &#123;</div><div class="line">        <span class="attr">host</span>:     <span class="string">'此处是host ip'</span>,</div><div class="line">        <span class="attr">user</span>:     <span class="string">'root'</span>,</div><div class="line">        <span class="attr">password</span>: <span class="string">'此处是密码'</span>,</div><div class="line">        <span class="attr">parallel</span>: <span class="number">10</span>,</div><div class="line">        <span class="attr">log</span>:      gutil.log</div><div class="line">        <span class="comment">// debug: gutil.log</span></div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line">    gutil.log(gutil.colors.magenta(<span class="string">"---------上传静态资源文件--------"</span>));</div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></div><div class="line">    <span class="comment">// turn off buffering in gulp.src for best performance</span></div><div class="line">    <span class="keyword">return</span> gulp.src( path.join( resourceDir, <span class="string">"**/*"</span>), &#123; <span class="attr">buffer</span>: <span class="literal">false</span> &#125; )</div><div class="line">        .pipe( conn.dest(<span class="string">'/home/richmail/nginx/htdocs/html5'</span>) );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于 JavaScript 自定义构建，在 gulpfile.js 里面新加了 customBuildJs、customBuildAndDeployJs 两个 task。</p>
<ul>
<li><strong>CSS 自定义构建</strong></li>
</ul>
<p>CSS 自定义构建包含“打包”、“打包并部署”两个任务，实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-- renders.js --</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建CSS</div><div class="line">   * @description gulp customBuildCss --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildCSS'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'cssBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包的 css 文件配置'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressCSS'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'CSS文件自定义构建'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildCss'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建并自动部署CSS</div><div class="line">   * @description gulp customBuildAndDeployCss --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildDeployCSS'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'cssBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包的 css 文件配置'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressCSS'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'CSS文件自定义构建并自动部署'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildAndDeployCss'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">//-- gulpfile.js --</span></div><div class="line"><span class="comment">// 自定义构建 css</span></div><div class="line"><span class="comment">// 参考 task compressCss</span></div><div class="line">gulp.task(<span class="string">'customBuildCss'</span>, [ <span class="string">'clean'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`yargv.fileConf =&gt; <span class="subst">$&#123;yargv.fileConf&#125;</span>`</span>);</div><div class="line">    <span class="keyword">var</span> fileConf = yargv.fileConf;</div><div class="line"></div><div class="line">    <span class="comment">// 压缩css文件</span></div><div class="line">    <span class="comment">// return concatCssFiles(&#123;concatConfig: './config/cssFiles/concatcss.json'&#125;)</span></div><div class="line">    <span class="keyword">return</span> concatCssFiles(&#123; <span class="attr">concatConfig</span>: fileConf &#125;)</div><div class="line">        .pipe(debug(&#123;<span class="attr">title</span>: <span class="string">'concating css file --&gt; '</span>&#125;))</div><div class="line">        .pipe(replaceImageVersion(&#123;</div><div class="line">            <span class="attr">rootDir</span>: html5Dir, </div><div class="line">            <span class="attr">images</span>: path.join(html5Dir, <span class="string">'/**/*.&#123;png,gif,jpg,ico&#125;'</span>)                    </div><div class="line">        &#125;))</div><div class="line">        .pipe(debug(&#123;<span class="attr">title</span>: <span class="string">'img url reversion file --&gt; '</span>&#125;))        </div><div class="line">        .pipe(minifyCss(&#123;<span class="attr">processImport</span>: <span class="literal">false</span>&#125;))</div><div class="line">        .pipe(debug(&#123;<span class="attr">title</span>: <span class="string">'compress css file --&gt; '</span>&#125;))</div><div class="line">        .pipe(gulp.dest(path.join(resourceDir, <span class="string">'css'</span>)));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 自定义构建并部署 css</span></div><div class="line">gulp.task(<span class="string">'customBuildAndDeployCss'</span>, [ <span class="string">'customBuildCss'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> conn = ftp.create( &#123;</div><div class="line">        <span class="attr">host</span>:     <span class="string">'此处是host ip'</span>,</div><div class="line">        <span class="attr">user</span>:     <span class="string">'root'</span>,</div><div class="line">        <span class="attr">password</span>: <span class="string">'此处是密码'</span>,</div><div class="line">        <span class="attr">parallel</span>: <span class="number">10</span>,</div><div class="line">        <span class="attr">log</span>:      gutil.log</div><div class="line">        <span class="comment">// debug: gutil.log</span></div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line">    gutil.log(gutil.colors.magenta(<span class="string">"---------上传静态资源文件--------"</span>));</div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></div><div class="line">    <span class="comment">// turn off buffering in gulp.src for best performance</span></div><div class="line">    <span class="keyword">return</span> gulp.src( path.join( resourceDir, <span class="string">"**/*"</span>), &#123; <span class="attr">buffer</span>: <span class="literal">false</span> &#125; )</div><div class="line">        .pipe( conn.dest(<span class="string">'/home/richmail/nginx/htdocs/html5'</span>) );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于 CSS 自定义构建，在 gulpfile.js 里面新加了 customBuildCss、customBuildAndDeployCss 两个 task。</p>
<ul>
<li><strong>HTML 自定义构建</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//-- renders.js --</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建HTML</div><div class="line">   * @description gulp customBuildHtml --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildHTML'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'htmlBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包的 html 文件'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressHTML'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'HTML文件自定义构建'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildHtml'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 自定义构建并自动部署HTML</div><div class="line">   * @description gulp customBuildAndDeployHtml --fileConf</div><div class="line">   *</div><div class="line">   */</div><div class="line">  $E(<span class="string">'btnBuildDeployHTML'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oCheckeds = $E(<span class="string">'htmlBuildContainerContent'</span>).querySelectorAll(<span class="string">'input[type="checkbox"]:checked'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'oCheckeds =&gt;'</span>, oCheckeds);</div><div class="line">    <span class="keyword">if</span> (!oCheckeds.length) &#123;</div><div class="line">      alert(<span class="string">'请选择要打包的 html 文件'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> fileConf = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = oCheckeds.length; i &lt; len; ++i) &#123;</div><div class="line">      fileConf.push(oCheckeds[i].value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fileConf =&gt;'</span>, fileConf.join(<span class="string">','</span>));</div><div class="line">    executeBuild(&#123;</div><div class="line">      <span class="attr">processingBarId</span>: <span class="string">'btnBuildProgressHTML'</span>,</div><div class="line">      <span class="attr">processingName</span>: <span class="string">'HTML文件自定义构建并自动部署'</span>,</div><div class="line">      <span class="attr">command</span>: <span class="string">'gulp'</span>,</div><div class="line">      <span class="attr">args</span>: [ <span class="string">'customBuildAndDeployHtml'</span>, <span class="string">'--fileConf='</span> + fileConf.join(<span class="string">','</span>) ]</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="comment">//-- gulpfile.js --</span></div><div class="line">  <span class="comment">// 自定义构建 html</span></div><div class="line"><span class="comment">// 参考 task htmlminFiles</span></div><div class="line">gulp.task(<span class="string">'customBuildHtml'</span>, [ <span class="string">'clean'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`yargv.fileConf =&gt; <span class="subst">$&#123;yargv.fileConf&#125;</span>`</span>);</div><div class="line">    <span class="keyword">var</span> fileConf = yargv.fileConf;</div><div class="line">    <span class="comment">// fileConf = fileConf.replace(/(\/mpost_operation\/)|(\/mpost_topic\/)|(\/mpost_v2\/)|(\/operation\/)|(\/umcupgrade\/)|(\/upPackage\/)|(\/weixin\/)/, '/**/');</span></div><div class="line">    <span class="comment">// 因为 html 目录下还包含一些二级目录的 html 文件</span></div><div class="line">    fileConf = fileConf.replace(<span class="regexp">/\/html\/\w+\//g</span>, <span class="string">'/html/**/'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(fileConf.split(<span class="string">','</span>))</div><div class="line">        .pipe(debug(&#123;<span class="attr">title</span>: <span class="string">'htmlmin file --&gt; '</span>&#125;)) </div><div class="line">        .pipe(htmlmin())</div><div class="line">        .pipe(debug(&#123;<span class="attr">title</span>: <span class="string">'minify-inline file --&gt; '</span>&#125;))</div><div class="line">        .pipe(minifyInline())</div><div class="line">        .pipe(gulp.dest(resourceDir));            </div><div class="line">&#125;);</div><div class="line"><span class="comment">// 自定义构建 html</span></div><div class="line">gulp.task(<span class="string">'customBuildAndDeployHtml'</span>, [ <span class="string">'customBuildHtml'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> conn = ftp.create( &#123;</div><div class="line">        <span class="attr">host</span>:     <span class="string">'此处是 host ip'</span>,</div><div class="line">        <span class="attr">user</span>:     <span class="string">'root'</span>,</div><div class="line">        <span class="attr">password</span>: <span class="string">'此处是密码'</span>,</div><div class="line">        <span class="attr">parallel</span>: <span class="number">10</span>,</div><div class="line">        <span class="attr">log</span>:      gutil.log</div><div class="line">        <span class="comment">// debug: gutil.log</span></div><div class="line">    &#125; );</div><div class="line"></div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line">    gutil.log(gutil.colors.magenta(<span class="string">"---------上传静态资源文件--------"</span>));</div><div class="line">    gutil.log(<span class="string">"----------**********-----------"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// gulp-ssh插件在上传文件数量过多时会报错，所以使用vinyl-ftp替代,效率更高</span></div><div class="line">    <span class="comment">// turn off buffering in gulp.src for best performance</span></div><div class="line">    <span class="keyword">return</span> gulp.src( path.join( resourceDir, <span class="string">"**/*"</span>), &#123; <span class="attr">buffer</span>: <span class="literal">false</span> &#125; )</div><div class="line">        .pipe( conn.dest(<span class="string">'/home/richmail/nginx/htdocs/html5'</span>) );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于 HTML 自定义构建，在 gulpfile.js 里面新加了 customBuildHtml、customBuildAndDeployHtml 两个 task。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>工具可以随意切换139邮箱代码当前工作目录，全网（release）、灰度（beta）、测试线（trunk），甚至可以手动输入分支（branch）目录； </p>
</li>
<li><p>工具执行任务是单线程，当前执行任务最多只有 1 个；即，如果当前正在构建时，点击其他按钮是无效的，应该等待当前任务执行完毕之后，才去点击执行其他任务。当然，你也可以右键终止当前任务；</p>
</li>
<li><p>由于工具是基于 Electron 的，所以包比较大，这个你懂的。</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li>Electron 官网：<a href="http://electron.atom.io/" target="_blank" rel="external">http://electron.atom.io/</a></li>
<li>gulp 中文网：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">http://www.gulpjs.com.cn/</a></li>
<li>Q.js Github项目地址：<a href="https://github.com/itorr/q.js" target="_blank" rel="external">https://github.com/itorr/q.js</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景目的&quot;&gt;&lt;a href=&quot;#背景目的&quot; class=&quot;headerlink&quot; title=&quot;背景目的&quot;&gt;&lt;/a&gt;背景目的&lt;/h3&gt;&lt;p&gt;自从139邮箱移动端酷版邮箱构建工具由原来的 ant 转移到 gulp 之后，构建速度大大的提升，就拿本人的机子（本人工作机
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gulp" scheme="http://jelon.top/tags/gulp/"/>
    
      <category term="Electron" scheme="http://jelon.top/tags/Electron/"/>
    
      <category term="构建工具" scheme="http://jelon.top/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Github 使用指南</title>
    <link href="http://jelon.top/posts/github-tutorial/"/>
    <id>http://jelon.top/posts/github-tutorial/</id>
    <published>2016-11-14T15:00:05.000Z</published>
    <updated>2016-11-20T10:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步骤，这里给大家安利一下。</p>
<h3 id="一、创建本地-git-仓库"><a href="#一、创建本地-git-仓库" class="headerlink" title="一、创建本地 git 仓库"></a>一、创建本地 git 仓库</h3><p>使用 <code>cd</code> 切换到你本地项目的目录（可以手动去创建一个目录，例如 /gitbub_test），然后执行以下 git 命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/1.png" alt="创建本地 git 仓库"></p>
<h3 id="二、将项目文件添加至你的-git-仓库"><a href="#二、将项目文件添加至你的-git-仓库" class="headerlink" title="二、将项目文件添加至你的 git 仓库"></a>二、将项目文件添加至你的 git 仓库</h3><p>将你的项目文件拷贝到刚才创建的目录下，然后执行以下 git 命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add . <span class="comment"># 添加所以修改过的文件或者新文件</span></div></pre></td></tr></table></figure>
<h3 id="三、将-add-的文件-commit-到仓库"><a href="#三、将-add-的文件-commit-到仓库" class="headerlink" title="三、将 add 的文件 commit 到仓库"></a>三、将 add 的文件 commit 到仓库</h3><p>将刚才已经添加的文件 commit 到仓库，执行命令如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">'这是注释语句'</span></div></pre></td></tr></table></figure>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/3.png" alt="commit 到仓库"></p>
<h3 id="四、去-github-上创建-Repository，截图如下"><a href="#四、去-github-上创建-Repository，截图如下" class="headerlink" title="四、去 github 上创建 Repository，截图如下"></a>四、去 github 上创建 Repository，截图如下</h3><p>创建页面如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/2.png" alt="创建页面截图"></p>
<p>创建完成之后结果如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/6.png" alt=""></p>
<h3 id="五、将本地仓库关联至-github"><a href="#五、将本地仓库关联至-github" class="headerlink" title="五、将本地仓库关联至 github"></a>五、将本地仓库关联至 github</h3><p>github Repository 创建好之后，接下来就是如何将本地 git 仓库关联至 github ，执行以下 git 命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/jangdelong/github_test.git</div></pre></td></tr></table></figure>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/4.png" alt="关联仓库至 github"></p>
<h3 id="六、将-github-上的代码拉取到本地"><a href="#六、将-github-上的代码拉取到本地" class="headerlink" title="六、将 github 上的代码拉取到本地"></a>六、将 github 上的代码拉取到本地</h3><p>执行以下 git 命令可将 github 上原有的代码拉去到本地。这一步前提是你的 github 上原来已经存在代码或文件，否则这一步可以省去。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<h3 id="七、提交代码"><a href="#七、提交代码" class="headerlink" title="七、提交代码"></a>七、提交代码</h3><p>最后一步就是提交代码了，执行 git 命令如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>这样，我们在 github 上就可以看到我们的项目代码了。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/github_tutorial/5.png" alt="完成"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候，我们想把自己做的开源项目放到 Github 上面，但是不会用Github，怎么办？没关系，Github 使用教程网上一大堆，随便一搜到处都是。尽管如此，如果你不嫌弃的话，你也可以看看下面教程，以下是我自己使用 github 过程中，总结的一些 Github 使用步
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Github" scheme="http://jelon.top/tags/Github/"/>
    
      <category term="Git" scheme="http://jelon.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Mac 开机变慢怎么办？</title>
    <link href="http://jelon.top/posts/mac-tips/"/>
    <id>http://jelon.top/posts/mac-tips/</id>
    <published>2016-11-12T06:01:04.000Z</published>
    <updated>2016-11-12T09:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/mac-tips/mac-tips.jpg" alt="Mac Tips"></p>
<h3 id="一、尽量删除桌面文件"><a href="#一、尽量删除桌面文件" class="headerlink" title="一、尽量删除桌面文件"></a>一、尽量删除桌面文件</h3><p>　　每次Mac启动都要对桌面的内容进行索引，为桌面每个文件建立缩略图标(thumbnail icons )等等。<br>　　<br>　　因此，建议你可以把桌面上的文件尽可能的放入相应文件夹，分门别类。一来加快开机速度，二来也更加有条理。
　　</p>
<h3 id="二、-去除启动加载程序"><a href="#二、-去除启动加载程序" class="headerlink" title="二、 去除启动加载程序"></a>二、 去除启动加载程序</h3><p>　　系统偏好的用户设定里可以去除一些不用的启动程序(System Preferences and User Accounts)你只需把那些程序前的钩子点去就行(比如iChat)。通过Activity Monitor程序，你可以看到后台运行程序的清单。<br>　　<br>　　这个对于我来说，是一个习惯，平时有软件新安装后要求在启动时检查更新，我一般都会点击否。</p>
<h3 id="三、-禁用Dashboard"><a href="#三、-禁用Dashboard" class="headerlink" title="三、 禁用Dashboard"></a>三、 禁用Dashboard</h3><p>　　如果你经常使用的话，dashboard固然好。然而，你也要清楚，每个 widgets 和 web clips 都非常占内存和资源。怎样禁止? 方法也很简单。<br>　　<br>　　打开Terminal 敲入以下命令:<br>　　<br>　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　defaults write com.apple.dashboard mcx-disabled -boolean YES</div></pre></td></tr></table></figure></p>
<p>　　然后你可以重启macbook或者敲入以下命令：<br>　　　　<br>　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　killall Dock</div></pre></td></tr></table></figure></p>
<p>　　<br>　　当你又需要dashboard的时候，以下命令可以逆转：<br>　　　　<br>　　<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　defaults write com.apple.dashboard mcx-disabled -boolean NO　</div><div class="line">　　</div><div class="line">　　<span class="comment"># 再重启或敲入 :</span></div><div class="line">　　killall Dock</div></pre></td></tr></table></figure></p>
<p>　　</p>
<h3 id="四、清除-PRAM-只适用于英特尔的苹果电脑"><a href="#四、清除-PRAM-只适用于英特尔的苹果电脑" class="headerlink" title="四、清除 PRAM (只适用于英特尔的苹果电脑)"></a>四、清除 PRAM (只适用于英特尔的苹果电脑)</h3><p>　　这个方法不是根本的解决方法，但是可以除去一些不必要的开机设置。因而也节省了时间。方法是：重启你的电脑，同时按下 command + option + p + r 直到听到3 到4 声启动铃响之后松手。
　　</p>
<h3 id="五、清除PMU-iMac不适用-，对于Macbook-Macbook-Pro用户，方法是："><a href="#五、清除PMU-iMac不适用-，对于Macbook-Macbook-Pro用户，方法是：" class="headerlink" title="五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是："></a>五、清除PMU (iMac不适用)，对于Macbook, Macbook Pro用户，方法是：</h3><p>　　1. 确保Macbook关闭。<br>　　2. 去掉电源适配器和电池。<br>　　3. 按下电源开关并保持 5 秒钟，放开。<br>　　4. 接上电源适配器和电池。<br>　　5. 打开电源开关。<br>　　<br>　　对于Macbook Air用户，方法是：<br>　　<br>　　1. 确保Air关机状态。<br>　　2. 把电源适配器接上工作电源。<br>　　3. 按下(左)Shift-Control-Option 同时按一下电源开关. (记住，要用左边的shift等键)。<br>　　4. 等5 分钟，按下电源开关重启 Macbook Air。
　　</p>
<h3 id="六、禁止无用的系统选项"><a href="#六、禁止无用的系统选项" class="headerlink" title="六、禁止无用的系统选项."></a>六、禁止无用的系统选项.</h3><p>　　如果你没有用到Wireless(无线上网), Bluetooth(蓝牙), Speech Recognition(语音识别) or Internet Sharing(共享)，那么，很简单， 关掉他们！</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>来自 <a href="http://www.3lian.com/edu/2015/07-04/226772.html" target="_blank" rel="external">http://www.3lian.com/edu/2015/07-04/226772.html</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   有部分Mac用户朋友可能会感觉到，自己的Mac在使用了一段时间后，开机也变得越来越慢了，我们该如何优化Mac的开机速度呢，下面小编给你推荐下面6个优化Mac开机速度的小技巧，希望能帮助到大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xs305.com1.z
    
    </summary>
    
      <category term="生活琐事" scheme="http://jelon.top/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
    
      <category term="Mac" scheme="http://jelon.top/tags/Mac/"/>
    
      <category term="开机变慢" scheme="http://jelon.top/tags/%E5%BC%80%E6%9C%BA%E5%8F%98%E6%85%A2/"/>
    
  </entry>
  
  <entry>
    <title>Yarn, 全新的 JavaScript 包管理器</title>
    <link href="http://jelon.top/posts/yarn/"/>
    <id>http://jelon.top/posts/yarn/</id>
    <published>2016-10-17T11:57:08.000Z</published>
    <updated>2016-11-01T13:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子，Facebook 开源了一款新的 Node.js 包管理器 —- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议论，也永远是道听途说，要想更深入地了解 Yarn，还是得自己亲自去试一试，毕竟实践是最有发言权的，不是吗？</p>
<p>废话呢，就不多说了，直接进入主题。今天就来认识一下它，作为菜鸟的我，（wen）水（cai）平（hen）有（shui）限，写的不对的地方，欢迎指正。😝</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/1.png?v=2" alt="yarn-kitten-full"></p>
<h3 id="Yarn-是什么"><a href="#Yarn-是什么" class="headerlink" title="Yarn 是什么"></a>Yarn 是什么</h3><p>Yarn 是 Node.js 代码的包管理器（类似 NPM ）。 它允许你使用世界各地开发人员开发的代码，当然也可以共享你的代码。 Yarn 的优点是速度快，同时可以做到安全，可靠这一点，所以你不必担心。Yarn 允许你使用其他开发人员的解决方案来解决不同的问题，使你更容易开发自己的产品。因为，Yarn 令开发者可以更加迅捷和从容地享受前人栽种的果实，进而集中精力打造自己的产品 —- 这才是更加重要的事情。</p>
<p>在使用 Yarn 时，开发者们还像以前一样从 NPM 仓库那里获取资源，但安装速度更快，不同的机器的安装结果完全一致，甚至还可以在安全的离线环境中使用。代码通过称为包（有时称为模块）的东西共享。 包包含所有共享的代码以及描述包的package.json文件。</p>
<p>在Facebook，Yarn 作为 NPM 的替代物以解决随着代码体积的不断增长和团队规模的不断壮大，在一致性、安全性和性能方面遇到的问题，现在以开源的方式发布这个成果，它是由 Exponent、 Google、Tilde 与 Facebook 合作完成的。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在使用 Yarn 之前，需要先在你的系统上安装 Yarn。Yarn 提供各种平台的安装包，无论你是使用 Mac、Windows 还是 Linux，甚至 Unix，都可以安装 Yarn。这里给大家介绍两种常用的系统安装 Yarn， Mac 和 Windows。</p>
<p><strong>Mac OS</strong></p>
<p>首先，你的电脑上得先安装 Node.js，如果没有没有安装，请去<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 官网</a>下载自行安装。</p>
<ul>
<li>Homebrew</li>
</ul>
<p><a href="http://brew.sh/" target="_blank" rel="external">Homebrew（http://brew.sh/）</a>，是 Mac 上强烈推荐的套件管理器，你可以通过 Homebrew 安装 Yarn，同时也可以通过 Homebrew 安装 Node。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install</div></pre></td></tr></table></figure>
<ul>
<li>设置路径</li>
</ul>
<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。</p>
<p>在你的配置文件（如 .profile, .bashrc, .zshrc等）里面加上 <code>export PATH=&quot;$PATH:$HOME/.yarn/bin&quot;</code>。</p>
<p>最后测试一下，Yarn 是否已经安装成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn --version</div></pre></td></tr></table></figure>
<p><strong>Windows</strong></p>
<p>Windows 安装 Yarn 可以通过以下两种方法安装。</p>
<ul>
<li>第一种，可以直接下载安装程序</li>
</ul>
<p>Yarn 官网提供 .msi 安装文件供 Windows 用户进行下载安装。同样，你在安装 Yarn 之前，要先保证你已经安装了 Node.js。Yarn for Windows 最新安装包下载链接如下：</p>
<p><a href="https://yarnpkg.com/latest.msi" target="_blank" rel="external">Download Installer</a></p>
<ul>
<li>第二种，通过 Chocolatey 安装</li>
</ul>
<p>Chocolatey 是 Windows 的包管理器，您可以按照这些<a href="https://chocolatey.org/install" target="_blank" rel="external">说明</a>安装 Chocolatey 。</p>
<p>好了，安装完了 Chocolatey 之后就开始安装 Yarn 吧，在控制台里面输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">choco install yarn</div></pre></td></tr></table></figure>
<ul>
<li>路径设置</li>
</ul>
<p>您将需要在终端中设置PATH环境变量，以便全局访问Yarn的二进制文件。将 <code>set PATH =％PATH％; C：\。yarn \ bin</code> 添加到您的 shell 环境中。</p>
<h3 id="用-NPM-的方式去安装-Yarn"><a href="#用-NPM-的方式去安装-Yarn" class="headerlink" title="用 NPM 的方式去安装 Yarn"></a>用 NPM 的方式去安装 Yarn</h3><p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/2.jpg?v=2" alt="这就很尴尬了"></p>
<p>这就很尴尬了，想要取代别人，却要通过别人安装，难道这就是传说中的青出于蓝而胜于蓝。😝虽然，这很尴尬，但比 Yarn 官网提供的那些安装方法真是爽的要死，另外，在我也是通过这种方式安装的，哎😌。来吧，我们开始通过 NPM 安装 Yarn吧。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn</div></pre></td></tr></table></figure>
<p>Mac 上安装成功截图如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/3.jpeg" alt="Mac OS"></p>
<p>Windows 上安装截图如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/4.png" alt="Windows"></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/5.png" alt="Windows"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Yarn 的使用很简单，虽然和 NPM 相似，但是又有所区别。</p>
<ul>
<li>初始化新项目</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn init</div></pre></td></tr></table></figure>
<ul>
<li>下载依赖包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yarn add [package]</div><div class="line">yarn add [package]@[version]</div><div class="line">yarn add [package]@[tag]</div></pre></td></tr></table></figure>
<ul>
<li>更新依赖包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yarn upgrade [package]</div><div class="line">yarn upgrade [package]@[version]</div><div class="line">yarn upgrade [package]@[tag]</div></pre></td></tr></table></figure>
<ul>
<li>删除依赖包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn remove [package]</div></pre></td></tr></table></figure>
<ul>
<li>下载项目所有的依赖包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn       <span class="comment"># or yarn install</span></div></pre></td></tr></table></figure>
<h3 id="NPM-vs-Yarn-速查表"><a href="#NPM-vs-Yarn-速查表" class="headerlink" title="NPM vs Yarn 速查表"></a>NPM vs Yarn 速查表</h3><p><strong>你需要知道的</strong></p>
<ul>
<li><p><code>npm install === yarn</code> <code>install</code> 关键字可以省略。</p>
</li>
<li><p><code>npm install react --save === yarn add react</code> React 包信息立即保存到你的package.json中。</p>
</li>
<li><p><code>npm uninstall react --save === yarn remove react</code> <code>--save</code> 可以通过<code>npm config set save true</code> 在NPM中默认设置，但这对大多数开发人员来说是不明显的。 从<code>package.json</code> 中添加和删除是Yarn中的默认值。</p>
</li>
<li><p><code>npm install react --save-dev === yarn add react --dev</code></p>
</li>
<li><p><code>npm update react --save === yarn upgrade react</code><br>强烈建议用 upgrade 来替代 update，因为这更能体现版本号变更。 </p>
</li>
<li><p><code>npm install react --global === yarn global add react</code> 对于全局安装，我们都会很谨慎。</p>
</li>
</ul>
<p><strong>你已经知道的</strong></p>
<ul>
<li><code>npm init === yarn init</code></li>
<li><code>npm link === yarn link</code></li>
<li><code>npm outdated === yarn outdated</code></li>
<li><code>npm publish === yarn publish</code></li>
<li><code>npm run === yarn run</code></li>
<li><code>npm cache clean === yarn cache clean</code></li>
<li><code>npm login === yarn login (and logout)</code></li>
<li><code>npm test === yarn test</code></li>
</ul>
<p><strong>Yarn 拥有，NPM 没有</strong></p>
<ul>
<li><code>yarn licenses</code> — 允许您检查依赖项的许可证。</li>
<li><code>yarn licenses generate</code> — 自动创建许可证依赖性免责声明。</li>
<li>支持 Emojis</li>
<li>支持速度滚动条</li>
<li>自动生成 lock 文件（.lock 保存所有依赖包的版本信息）</li>
<li>为安全而生</li>
</ul>
<p><strong>NPM 拥有，Yarn 没有</strong></p>
<ul>
<li><code>npm xmas</code></li>
<li><code>npm visnup</code></li>
</ul>
<h3 id="以下载-React-为例，实践一下"><a href="#以下载-React-为例，实践一下" class="headerlink" title="以下载 React 为例，实践一下"></a>以下载 React 为例，实践一下</h3><p><img src="http://7xs305.com1.z0.glb.clouddn.com/yarn/6.png" alt="yarn react"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://yarnpkg.com/" target="_blank" rel="external">https://yarnpkg.com/</a></li>
<li><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="external">https://github.com/yarnpkg/yarn</a></li>
<li><a href="http://www.tuicool.com/articles/eMRJVvU" target="_blank" rel="external">http://www.tuicool.com/articles/eMRJVvU</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22892675" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/22892675</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阵子，Facebook 开源了一款新的 Node.js 包管理器 —- Yarn，用来替代 NPM ，一时间引起了不少议论。有人认为这是重复在“造轮子”；有人跃跃欲试却浅尝辄止；有人却更多地关注 Yarn 给前端开发者带来的哪些好处，比如说网络速度。不管别人怎么看、怎么议
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Node.js" scheme="http://jelon.top/tags/Node-js/"/>
    
      <category term="npm" scheme="http://jelon.top/tags/npm/"/>
    
      <category term="Yarn" scheme="http://jelon.top/tags/Yarn/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Vuex + Bootstrap 入门实践</title>
    <link href="http://jelon.top/posts/vue-vuex-bootstrap/"/>
    <id>http://jelon.top/posts/vue-vuex-bootstrap/</id>
    <published>2016-08-27T15:09:28.000Z</published>
    <updated>2016-09-04T07:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前端的幺蛾子就是多，怎么又来一个框架？其实 Vue.js 已经开发了两年多了。第一次公开发布则是在 2014 年 2 月。这两年间它一直在不断进化，今天也已经有许多人在生产环境中使用它。</p>
<p>—- 尤雨溪（Vue.js 作者）</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是一个优秀的框架，忍不住跃跃欲试。正好公司的周例会上，自己做了一个Demo来分享一下。但是，由于个人原因，例会上或许没有讲得太明白，因此，在这里以博文的形式，重新回顾一下例会的分享。</p>
<p>首先，看一下成品，用的 Vue + Vuex + Bootstrap 做了一个类似博客的Demo，截图如下：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/1.gif" alt="博客Demo"></p>
<p>这是一个很简单的 Demo ，主要分为文章列表页、文章页、实验室、关于、留言这几个页面。另外右边的那个 Counter 只是用来展示 Vuex 的 actions 的，和博客本身没什么联系。</p>
<p>接下来，介绍这个 Demo 里面用到的技术：</p>
<ul>
<li>Vue</li>
<li>Boostrap</li>
<li>Vuex</li>
</ul>
<h3 id="什么是-Vue-js"><a href="#什么是-Vue-js" class="headerlink" title="什么是 Vue.js"></a>什么是 Vue.js</h3><p>其实正如引言 Vue.js 的作者尤雨溪所说的，Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个前端框架。我们可以归结为以下下两点：</p>
<ul>
<li>Vue.js 是用于构建交互式的 Web 界面库；</li>
<li>Vue.js 提供了MVVM 的数据绑定和一个可组合的组件系统，具有简单、灵活的API。</li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/2.png" alt="Vue 截图"></p>
<h3 id="Vue-js-的特点"><a href="#Vue-js-的特点" class="headerlink" title="Vue.js 的特点"></a>Vue.js 的特点</h3><ul>
<li><strong>简洁</strong> ： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。</li>
<li><strong>数据驱动</strong> ： 自动追踪依赖的模板表达式和计算属性。</li>
<li><strong>组件化</strong> ： 用解耦、可复用的组件来构造界面。</li>
<li><strong>轻量</strong> ：  ~24kb min+gzip，无依赖。</li>
<li><strong>快速</strong> ： 精确有效的异步批量 DOM 更新。</li>
<li><strong>模块友好</strong> ： 通过 NPM 或 Bower 安装，无缝融入你的工作流。</li>
</ul>
<h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p>
<p>Bootstrap 这里对于大家来说，应该都比较熟悉了，这里就不多说了。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/3.png" alt="Bootstrap"></p>
<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>什么是 Vuex ？我第一次看到这个名称的时候，我以为 Vuex 是 Vue 的升级版，有点尴尬 😓 。</p>
<p>其实，Vuex 是一个专门为 Vue.js 应用所设计的集中式状态管理架构。它借鉴了 Flux 和 Redux 的设计思想，但简化了概念，并且采用了一种为能更好发挥 Vue.js 数据响应机制而专门设计的实现。Vuex 之于 Vue 类似 Redux 之于 React ，但是 Vuex 的作者也是 Vue 的作者。</p>
<p>每一个 Vuex 应用的核心就是 store（仓库）。<br>对于 Vuex 介绍，只言片语应该是道不尽的，不如看一张流程图来理解更好。</p>
<h3 id="Vuex-原理及流程图"><a href="#Vuex-原理及流程图" class="headerlink" title="Vuex 原理及流程图"></a>Vuex 原理及流程图</h3><p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/4.png" alt="Vuex 流程图"></p>
<p>关于这个流程图，说明一下。每一个 Vuex 应用的核心就是 store（仓库）。”store” 基本上就是一个容器，它包含着你应用里大部分的 状态(即 state). Vuex 和单纯的全局对象有以下两点不同：</p>
<ul>
<li>Vuex 的状态存储是响应式的. 当 Vue 组件从 store 中读取状态的时候, 若 store 中的状态发生变化，那么相应的组件也会相应地高效地得到更新。</li>
<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地分发 状态变更事件(explicitly dispatching mutations)。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ul>
<p>简单地说，Vue 组件是不可以直接去改变数据 State ，而是通过 Actions 去分发状态变更，然后通过变更函数 （Mutations） 去改变数据 State ， 数据变化之后，Vue 组件可以通过 getters 去获取变更之后的数据 State 最后更新组件视图。</p>
<h3 id="Vue-安装及项目构建"><a href="#Vue-安装及项目构建" class="headerlink" title="Vue 安装及项目构建"></a>Vue 安装及项目构建</h3><p><strong>安装 Vue</strong></p>
<p>安装 Vue 的命令如下，一般我们会选择全局安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install vue</div><div class="line"><span class="comment"># 最新稳定 CSP 兼容版本</span></div><div class="line">$ npm install vue@csp</div><div class="line"><span class="comment"># 全局安装</span></div><div class="line">$ npm install -g vue-cli</div></pre></td></tr></table></figure>
<p><strong>下载模板</strong></p>
<p>安装完 Vue 之后，接着是去下载 Vue 模板，命令行如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建一个基于 "webpack" 模板的新项目</span></div><div class="line">$ vue init webpack my-project</div><div class="line"><span class="comment"># 安装依赖，走你</span></div><div class="line">$ <span class="built_in">cd</span> my-project</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖模块</span></div><div class="line">$ npm install</div><div class="line"><span class="comment"># 运行项目</span></div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>另外，像 Vuex、还有 Vue-router 以及一些第三方插件通过 npm 安装；而 Bootstrap 下载下来直接放到项目的 static 目录下就好。</p>
<h3 id="项目代码结构"><a href="#项目代码结构" class="headerlink" title="项目代码结构"></a>项目代码结构</h3><p>完成以上工作之后，我们会得到一个 Vue 项目空模板，然后，我们就模板里面扩充 components （组件）、新建 vuex 目录，还有 Bootstrap 放在模板的 static 目录下，以我做的这个博客 Demo 为例，最终的项目结构截图如下。</p>
<p><strong>项目代码结构图：</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/5.png" alt="代码结构图"></p>
<p><strong>项目树形图：</strong></p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/vue_vuex_bootstrap/6.png" alt="项目树形图"></p>
<p>项目代码，这里就不多说，后面我会把 Demo 代码放到我的 Github 上供大家参考；这里贴一下程序入口 js （main.js） 、 主组件 （App.vue）和主入口页面 html。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/routers/Home'</span></div><div class="line"><span class="keyword">import</span> Lab <span class="keyword">from</span> <span class="string">'./components/routers/Lab'</span></div><div class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./components/routers/About'</span></div><div class="line"><span class="keyword">import</span> Comment <span class="keyword">from</span> <span class="string">'./components/routers/Comment'</span></div><div class="line"><span class="keyword">import</span> My <span class="keyword">from</span> <span class="string">'./components/routers/My'</span></div><div class="line"><span class="keyword">import</span> Post <span class="keyword">from</span> <span class="string">'./components/routers/page/Post'</span></div><div class="line"></div><div class="line">Vue.use(VueRouter)</div><div class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter()</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 路由配置</div><div class="line"> */</div><div class="line">router.map(&#123;</div><div class="line">  <span class="string">'/home'</span>: &#123;</div><div class="line">    <span class="attr">component</span>: Home</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/lab'</span>: &#123;</div><div class="line">    <span class="attr">component</span>: Lab,</div><div class="line">    <span class="attr">subRoutes</span>: &#123;</div><div class="line">      <span class="string">'/my'</span>: &#123;</div><div class="line">        <span class="attr">component</span>: My</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/about'</span>: &#123;</div><div class="line">    <span class="attr">component</span>: About</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/comment'</span>: &#123;</div><div class="line">    <span class="attr">component</span>: Comment</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/post/:_id'</span>: &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">component</span>: Post</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 设置默认情况下打开的页面</span></div><div class="line">router.redirect(&#123;</div><div class="line">  <span class="string">'/'</span>: <span class="string">'/home'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.start(App, <span class="string">'app'</span>)</div></pre></td></tr></table></figure>
<p><strong>App.vue</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">blog-header</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">blog-sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-sidebar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">blog-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> BlogHeader <span class="keyword">from</span> <span class="string">'./components/common/BlogHeader'</span></div><div class="line"><span class="keyword">import</span> BlogFooter <span class="keyword">from</span> <span class="string">'./components/common/BlogFooter'</span></div><div class="line"><span class="keyword">import</span> BlogSidebar <span class="keyword">from</span> <span class="string">'./components/common/BlogSidebar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    BlogHeader,</div><div class="line">    BlogFooter,</div><div class="line">    BlogSidebar</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Jelon<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"./static/favicon.ico"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/css/bootstrap.min.css"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./static/css/bootstrap-theme.min.css"</span> &gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Vue-构建项目优点"><a href="#Vue-构建项目优点" class="headerlink" title="Vue 构建项目优点"></a>Vue 构建项目优点</h3><ul>
<li>简单，上手比较快。这主要是因为 Vue 默认提供了的项目空模板，只要安装了就可以开始上手做项目了，再加上使用鼎鼎大名的 Bootstrap 就更加得心应手了；</li>
<li>小巧，轻量级。这个主要是拿 Vue.js 跟 Angular.js 对比；</li>
<li>模块化友好。通过 NPM 或 Bower 安装，无缝融入你的工作流；</li>
<li>文档齐全完备。Vue 有着很优秀的中文官网文档，当然你想看英文甚至日文，也有。</li>
<li>…</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p>Vue 中文官网 <a href="http://cn.vuejs.org/" target="_blank" rel="external">http://cn.vuejs.org/</a></p>
</li>
<li><p>Bootstrap 官网 <a href="http://getbootstrap.com/" target="_blank" rel="external">http://getbootstrap.com/</a></p>
</li>
<li><p>Vuex 中文教程教程 <a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">http://vuex.vuejs.org/zh-cn/index.html</a></p>
</li>
<li>Vue-router 中文教程 <a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/index.html</a></li>
</ul>
<h3 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h3><p>Demo 已经放到 github ， 地址如下：<br><a href="https://github.com/jangdelong/vue-blog-demo" target="_blank" rel="external">https://github.com/jangdelong/vue-blog-demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Vue.js 是一个用来开发 web 界面的前端库。它也有配套的周边工具。如果把这些东西都算在一起，那么你也可以叫它一个『前端框架』。但我个人更倾向于把它看做是一套可以灵活选择的工具组合。如果你到现在都还没听说过 Vue.js，你心里可能在想：前
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue.js" scheme="http://jelon.top/tags/Vue-js/"/>
    
      <category term="Vuex" scheme="http://jelon.top/tags/Vuex/"/>
    
      <category term="Bootstrap" scheme="http://jelon.top/tags/Bootstrap/"/>
    
      <category term="MVVM" scheme="http://jelon.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>通过 jQuery 获取浏览器窗口高度问题</title>
    <link href="http://jelon.top/posts/jquery-window-height-incorrect/"/>
    <id>http://jelon.top/posts/jquery-window-height-incorrect/</id>
    <published>2016-08-06T09:32:16.000Z</published>
    <updated>2016-08-29T14:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文由 Jelon 翻译自 VIRAL PATEL 的<a href="http://viralpatel.net/blogs/jquery-window-height-incorrect/" target="_blank" rel="external">jQuery window height is not correct</a>。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/jquery-window-height-incorrect/1.jpg" alt="jQuery-window-height"></p>
<p>我曾经在使用jQuery一些东西的时候碰到了这样一些奇怪的问题。例如，我尝试着用 jQuery 的 <code>$(window).height()</code> 来获取浏览器窗口高度，就遇到了问题。</p>
<p>理论上，<code>$(window).height()</code> 会返回浏览器窗口的最小高度（译者注，注意是窗口高度），也就是当前浏览器当前窗口的高度。如果，你改变了窗口，这个高度值也会随之变化。</p>
<p>同理，你可以用 <code>$(document).height()</code> ，这个方法可以返回已渲染<br>之后页面的高度。当网页的高度小于窗口可视区域的高度时，这个方法会返回的是可视区域的高度值。也就是说，当页面的内容很少、窗口大于内容所需要的空间的时候，网页高度会比 jQuery 浏览器高度要小。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>但是最近在使用这两个值得时候，好像 <code>$(window).height()</code> 和 <code>$(document).height()</code> 得到的是一样的值。明显，<code>$(window).height()</code> 返回了一个不正确的值。</p>
<p>源代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://code.jquery.com/jquery-1.10.1.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#winheight'</span>).text($(<span class="built_in">window</span>).height());</div><div class="line">    $(<span class="string">'#docheight'</span>).text($(<span class="built_in">document</span>).height());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"console"</span>&gt;</span></div><div class="line">    $(window).height() = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"winheight"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    $(document).height() = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"docheight"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, ...</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(window).height() = <span class="number">672</span> </div><div class="line">$(document).height() = <span class="number">672</span></div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class="keyword">orci </span>sit amet iaculis. Etiam <span class="built_in">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class="keyword">orci </span>pellentesque. Aenean <span class="keyword">dictum </span>lobortis aliquet. Nullam <span class="keyword">blandit </span>rhoncus <span class="keyword">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class="keyword">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class="keyword">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class="keyword">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class="keyword">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class="keyword">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</div><div class="line"></div><div class="line">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class="keyword">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class="keyword">scelerisque </span>lorem id sagittis imperdiet.</div><div class="line"></div><div class="line">Ut convallis <span class="keyword">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class="keyword">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class="keyword">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class="keyword">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</div><div class="line"></div><div class="line">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class="keyword">bibendum </span>elit eu consequat. Mauris <span class="keyword">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class="keyword">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class="keyword">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class="keyword">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class="keyword">justo </span>eget augue malesuada, <span class="built_in">at</span> laoreet nibh dapibus.</div><div class="line"></div><div class="line">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class="keyword">diam </span>et pretium. Etiam <span class="keyword">bibendum </span>elit <span class="built_in">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</div></pre></td></tr></table></figure>
<p>神马？！结果 <code>$(window).height()</code> 和 <code>$(document).height()</code> 竟然都返回750。窗口高度不应该是这个值，而应该是200px。很明显，页面document会更大一些，因为它有滚动条。</p>
<p>那么问题来了，为神马 jQuery 对于 window 和 document 都得到一样的高度？事实上，少了某个简单的东西。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>因为我们的 HTML 页面里面没有做 DOCTYPE 声明，所以可以这么说它不是一个有效的 HTML 。如果 doctype 没有指定文档类型，jQuery 也不会正确的计算 window height 和 document height 。<code>&lt;!DOCTYPE html&gt;</code> 声明不是一个HTML标签；它是什么版本的HTML页面是用Web浏览器的指令。</p>
<p>所以，我们就试一下，把这个指令加到html页面里面，然后看看结果怎么样。</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">//.. </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(window).height() = <span class="number">200</span> </div><div class="line">$(document).height() = <span class="number">672</span></div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vulputate faucibus <span class="keyword">orci </span>sit amet iaculis. Etiam <span class="built_in">at</span> libero mi. Cras aliquet leo in turpis sollicitudin, pellentesque tincidunt <span class="keyword">orci </span>pellentesque. Aenean <span class="keyword">dictum </span>lobortis aliquet. Nullam <span class="keyword">blandit </span>rhoncus <span class="keyword">orci, </span>posuere facilisis nibh placerat et. Etiam sed <span class="keyword">justo </span>vel nisl molestie rutrum in eu ipsum. Etiam sed mattis erat, vitae malesuada metus. Nulla accumsan facilisis ligula, sit amet faucibus enim ullamcorper id. Praesent sodales <span class="keyword">dictum </span>ipsum nec vehicula. In hac habitasse platea <span class="keyword">dictumst. </span>Integer euismod ante euismod metus convallis consectetur. Aliquam id urna sit amet ligula tempor fermentum. Integer tincidunt elementum nunc, sit amet <span class="keyword">scelerisque </span>enim iaculis a. Cras sed pharetra enim, sed <span class="keyword">bibendum </span>massa. Aliquam laoreet elit ac placerat pellentesque.</div><div class="line"></div><div class="line">Pellentesque ullamcorper et lectus quis adipiscing. Phasellus fringilla <span class="keyword">diam </span>augue, nec mattis ipsum porta ac. Nulla feugiat venenatis sapien, quis interdum nisi iaculis sit amet. Maecenas aliquet enim in arcu tincidunt, tincidunt porttitor arcu eleifend. Sed lobortis quam non purus interdum, eu lacinia lacus vehicula. Pellentesque et augue laoreet, mattis leo vel, congue enim. Ut fringilla erat vitae urna tincidunt porta. Curabitur <span class="keyword">scelerisque </span>lorem id sagittis imperdiet.</div><div class="line"></div><div class="line">Ut convallis <span class="keyword">justo </span>id urna congue ultrices. Integer placerat mollis sem, sit amet faucibus purus consectetur eget. Fusce porta pellentesque nisi id lacinia. Etiam <span class="keyword">bibendum </span>tempus tortor, sit amet lobortis mi adipiscing vel. Curabitur feugiat, lacus nec <span class="keyword">ornare </span>fermentum, velit leo pulvinar neque, eu fermentum eros <span class="keyword">orci </span>a lectus. Quisque ligula erat, auctor lacinia neque id, aliquet eleifend magna. Aliquam iaculis placerat aliquet.</div><div class="line"></div><div class="line">Morbi a luctus nisl, commodo sagittis dolor. Proin sit amet libero quam. Fusce mattis egestas sapien, quis vulputate sapien commodo sed. Donec neque erat, feugiat nec quam nec, facilisis tempus leo. Vivamus auctor <span class="keyword">bibendum </span>elit eu consequat. Mauris <span class="keyword">blandit </span>est lectus, quis accumsan purus hendrerit a. Phasellus nec nisi in <span class="keyword">justo </span>condimentum euismod. Pellentesque id arcu nunc. Phasellus in libero nec <span class="keyword">justo </span>faucibus sollicitudin in eu massa. Vivamus faucibus purus libero, eu posuere <span class="keyword">orci </span>tristique consectetur. Quisque urna sapien, sodales eget quam nec, sodales interdum felis. Vivamus dapibus <span class="keyword">justo </span>eget augue malesuada, <span class="built_in">at</span> laoreet nibh dapibus.</div><div class="line"></div><div class="line">Donec accumsan tellus dolor, in fermentum sem egestas non. Maecenas elementum eget metus eu consequat. Nulla vel ipsum non risus interdum consectetur. Phasellus convallis in leo rhoncus viverra. Mauris consectetur in <span class="keyword">diam </span>et pretium. Etiam <span class="keyword">bibendum </span>elit <span class="built_in">at</span> iaculis cursus. Vestibulum ac ligula nec odio suscipit laoreet eu eget nisl. Quisque adipiscing nunc sed mi luctus faucibus. Ut quis nisi ac ipsum venenatis sodales.</div></pre></td></tr></table></figure>
<p>哇擦，居然真行。所以呀，不要忘记在你的 html 页面加上 DOCTYPE 声明。最好使用一些 IDE 编辑器什么的帮你去创建 html 文件，因为这些编辑器会自动帮你检查这个。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文由 Jelon 翻译自 VIRAL PATEL 的&lt;a href=&quot;http://viralpatel.net/blogs/jquery-window-height-incorrect/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery wi
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jQuery" scheme="http://jelon.top/tags/jQuery/"/>
    
      <category term="浏览器高度" scheme="http://jelon.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%AB%98%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>淘宝 NPM 镜像</title>
    <link href="http://jelon.top/posts/taonpm/"/>
    <id>http://jelon.top/posts/taonpm/</id>
    <published>2016-07-30T03:13:14.000Z</published>
    <updated>2016-08-29T14:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-NPM"><a href="#什么是-NPM" class="headerlink" title="什么是 NPM"></a>什么是 NPM</h3><p>Node 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、Pear、Python 的 PyPI 一样。npm 是一个完全由 JavaScript 实现的命令行工具，通过 Node.js 执行，因此严格来讲它不属于 Node.js 的一部分。在最初的版本中，我们需要在安装完 Node.js 以后手动安装 npm。但从 Node.js 0.6 开始，npm 已包含在发行包中了，安装 Node.js 时会自动安装 npm。</p>
<h3 id="NPM-用途"><a href="#NPM-用途" class="headerlink" title="NPM 用途"></a>NPM 用途</h3><p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>
<h3 id="NPM-在国内"><a href="#NPM-在国内" class="headerlink" title="NPM 在国内"></a>NPM 在国内</h3><p>虽说 npm 很方便，但是在国内由于网络原因，使用 npm 下载一些依赖包的时候，速度还是很慢，甚至有时候还要翻墙，大大影响了我们的开发效率。那么，是否有解决方案呢，答案是有的，那就是淘宝 npm 镜像。</p>
<h3 id="什么是淘宝-NPM-镜像"><a href="#什么是淘宝-NPM-镜像" class="headerlink" title="什么是淘宝 NPM 镜像"></a>什么是淘宝 NPM 镜像</h3><p>淘宝的npm镜像是一个完整的 npmjs.org 镜像。你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步，<a href="http://npm.taobao.org/" target="_blank" rel="external">官网</a>截图如下。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/taonpm/1.33pic_hd.jpg" alt="taonpm官网"></p>
<h3 id="淘宝-NPM-镜像安装及使用"><a href="#淘宝-NPM-镜像安装及使用" class="headerlink" title="淘宝 NPM 镜像安装及使用"></a>淘宝 NPM 镜像安装及使用</h3><p><strong>安装</strong></p>
<ul>
<li>可以使用淘宝 npm 镜像定制的<code>cnpm</code>(gzip 压缩支持) 命令行工具代替默认的 <code>npm</code> :</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<ul>
<li>或者直接通过添加 <code>npm</code> 参数 alias 一个新命令:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></div><div class="line">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</div><div class="line">--disturl=https://npm.taobao.org/dist \</div><div class="line">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</div><div class="line"></div><div class="line"><span class="comment"># Or alias it in .bashrc or .zshrc</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></div><div class="line">  --cache=$HOME/.npm/.cache/cnpm \</div><div class="line">  --disturl=https://npm.taobao.org/dist \</div><div class="line">  --userconfig=$HOME/.cnpmrc"' &gt;&gt; ~/.zshrc &amp;&amp; <span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<ul>
<li>安装模块</li>
</ul>
<p>从 <code>registry.npm.taobao.org</code> 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 npm 会自动在后台进行同步, 并且会让你从官方 <code>NPM registry.npmjs.org</code> 进行安装. 下次你再安装这个模块的时候, 就会直接从淘宝 npm 安装了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install [name]</div></pre></td></tr></table></figure>
<ul>
<li>同步模块</li>
</ul>
<p>直接通过 <code>sync</code> 命令马上同步一个模块, 只有 <code>cnpm</code> 命令行才有此功能:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm sync connect</div></pre></td></tr></table></figure>
<p>当然, 你可以直接通过 <code>web</code> 方式来同步: <code>/sync/connect</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ open https://npm.taobao.org/sync/connect</div></pre></td></tr></table></figure>
<ul>
<li>其他模块</li>
</ul>
<p>支持 <code>npm</code> 除了 <code>publish</code> 之外的所有命令, 如:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm info connect</div></pre></td></tr></table></figure>
<h3 id="当然，还可以这样安装和使用"><a href="#当然，还可以这样安装和使用" class="headerlink" title="当然，还可以这样安装和使用"></a>当然，还可以这样安装和使用</h3><p>如果你不想用 <code>cnpm</code> ，或许你可以直接修改 <code>npm</code> config配置的 <code>registry</code> ，来使用淘宝 npm 镜像：</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>接着 config ls 一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config ls <span class="_">-l</span></div></pre></td></tr></table></figure>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/taonpm/npm_registry.jpg" alt="npm config ls"></p>
<p><strong>使用</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install [name]</div></pre></td></tr></table></figure>
<p>好了，现在开发者再一次解放出来（不用担心安装管理包时的速度问题）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-NPM&quot;&gt;&lt;a href=&quot;#什么是-NPM&quot; class=&quot;headerlink&quot; title=&quot;什么是 NPM&quot;&gt;&lt;/a&gt;什么是 NPM&lt;/h3&gt;&lt;p&gt;Node 包管理器 (npm) 是一个由 Node.js 官方提供的第三方包管理工具，就像 PHP、
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="npm" scheme="http://jelon.top/tags/npm/"/>
    
      <category term="淘宝npm" scheme="http://jelon.top/tags/%E6%B7%98%E5%AE%9Dnpm/"/>
    
  </entry>
  
  <entry>
    <title>初识React Native</title>
    <link href="http://jelon.top/posts/react-native-learning/"/>
    <id>http://jelon.top/posts/react-native-learning/</id>
    <published>2016-07-06T14:12:12.000Z</published>
    <updated>2016-07-24T05:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native了，感觉自己有点亡羊补牢。不说了，总结一下，以下是React Native for iOS的学习小总结。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>Node</p>
<p> Node可前往官网<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a>下载安装。React Native需要的Node版本是4.0以上，现在官网上面的最新版本v6.x版本是绝对可以满足的。</p>
</li>
<li><p>React Native 命令行工具<code>react-native-cli</code></p>
<p> 安装Node之后，Node会自带模块管理和发布工具NPM。接下来全局安装React Native命令行工具。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure>
</li>
<li><p>Xcode</p>
<p> React Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。</p>
</li>
<li><p>其他工具</p>
<ul>
<li><strong>Watchman</strong> Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。</li>
<li><strong>Flow</strong> Flow是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。</li>
</ul>
</li>
</ol>
<h3 id="构建React-Native项目"><a href="#构建React-Native项目" class="headerlink" title="构建React-Native项目"></a>构建React-Native项目</h3><p>输入以下命令行进行React Native项目构建</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 初始化项目</span></div><div class="line">react-native init AwesomeProject</div><div class="line"></div><div class="line"><span class="comment"># 运行项目</span></div><div class="line"><span class="built_in">cd</span> AwesomeProject</div><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<p>项目结构如图</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/react_native_code.jpg" alt="RN项目结构"></p>
<p>或者用Xcode直接打开ios目录下的JelonProject.xcodeproj文件，点击运行即可。<br>ok，运行成功，如下图所示。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/react_native_result.jpg" alt="React Native"></p>
<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>React Native本地调试地址是<code>http://localhost:8081/debugger-ui</code>，可以利用谷歌浏览器进行断点调试，跟Web页面项目的js调试是一样的。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/react_native_test.gif" alt="本地调试演示"></p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>不知道，会不会有人也遇到一下问题，导致项目编译失败。</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/react_native_bug1.jpg" alt="编译失败结果"></p>
<p>解决方案：</p>
<p>如果你电脑安装的Xcode版本是8 Beta，把该版本卸载，重新安装了7.3.1就没问题了，具体原因我也不是很清楚，我在中文社区问了，还没得到答案<a href="http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5" target="_blank" rel="external">http://bbs.reactnative.cn/topic/1743/react-native%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如今提起React，已经不是什么新玩意了吧，如果到现在还没有听过React这这个词，那真的是落后了好几条街了。从事前端工作，要经常学习一些新东西，不然很难跟上技术的脚步。这段时间我一直在看React以及React Native，据说好多公司已经开始用React Native
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="http://jelon.top/tags/react/"/>
    
      <category term="react-native" scheme="http://jelon.top/tags/react-native/"/>
    
      <category term="iOS" scheme="http://jelon.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac 终端命令大全介绍</title>
    <link href="http://jelon.top/posts/mac-command/"/>
    <id>http://jelon.top/posts/mac-command/</id>
    <published>2016-06-25T04:46:00.000Z</published>
    <updated>2016-08-29T14:27:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OSX-的文件系统"><a href="#OSX-的文件系统" class="headerlink" title="OSX 的文件系统"></a>OSX 的文件系统</h3><p>OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符概念是有区别的。你在桌面所看到的硬盘都挂在/Volumes目录下，比如接上个叫做 USBHD的移动硬盘，桌面上会显示出一个硬盘图标，它实际在哪里呢？ </p>
<p>在终端里执行 <code>ls /Volumes/USBHD</code>, 看看显示出的是不是这个移动硬盘的内容。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置</th>
<th style="text-align:left">目录</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">根目录位置</td>
<td style="text-align:left">/核心 Mach_kernel</td>
</tr>
<tr>
<td style="text-align:center">驱动所在位置</td>
<td style="text-align:left">/Systme/Library/Extensions</td>
</tr>
<tr>
<td style="text-align:center">用户文件夹位置</td>
<td style="text-align:left">/User/用户名</td>
</tr>
<tr>
<td style="text-align:center">桌面的位置</td>
<td style="text-align:left">/User/用户名/Desktop</td>
</tr>
</tbody>
</table>
<p>注：</p>
<ul>
<li>文件通配符为星号 <code>*</code>；</li>
<li>在Unix系统中是区别大小写字符的，<code>J.txt</code> 不等于 <code>j.txt</code>；</li>
<li>根目录标志<code>/</code>不是可有可无，<code>cd /Document</code> 表示转到根目录下的Document中，而<code>cd Document</code> 表示转到当前目录下的Document中。</li>
</ul>
<h3 id="如何进入命令操作模式"><a href="#如何进入命令操作模式" class="headerlink" title="如何进入命令操作模式"></a>如何进入命令操作模式</h3><p>再图形界面下，用finder 打开“应用程序” -&gt; “实用程序” -&gt; “终端”，如果连图形界面都进不去了（比如安错了显示驱动），开机时按 F8，用－s参数启动，然后输入命令<code>mount -uw /</code>。</p>
<h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><p>为了防止误操作破坏系统，再用户状态下时没有权限操作系统重要文件的，所以先要取得root权限 <code>sudo －s</code> ；然后输入密码，输入密码时没有任何回显，连星号都没有，只管输完回车就行了。 </p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p><strong>列出文件</strong></p>
<p><code>ls 参数 目录名</code> </p>
<p>例: 想看看根目录下有什么，<br><code>ls /</code> </p>
<p>想看看驱动目录下有什么， </p>
<p><code>ls /System/Library/Extensions</code><br>参数 -w 显示中文，-l 详细信息， -a 包括隐藏文件 </p>
<p><strong>转换目录</strong> </p>
<p><code>cd 目录名</code> </p>
<p>例：想到驱动目录下溜达一圈 </p>
<p><code>cd /System/Library/Extensions</code></p>
<p><strong>建立新目录</strong> </p>
<p><code>mkdir 目录名</code> </p>
<p>例：在驱动目录下建一个备份目录 backup </p>
<p><code>mkdir /System/Library/Extensions/backup</code></p>
<p>在桌面上建一个备份目录 backup </p>
<p><code>mkdir /User/用户名/Desktop/backup</code></p>
<p><strong>拷贝文件</strong></p>
<p><code>cp 参数 源文件 目标文件</code> </p>
<p>例：想把桌面的jelon.txt 拷贝到驱动目录中 </p>
<p><code>cp -R /User/用户名/Desktop/jelon.txt /System/Library/Extensions</code></p>
<p>参数R表示对目录进行递归操作。</p>
<p>把驱动目录下的所有文件备份到桌面backup </p>
<p><code>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup</code></p>
<p><strong>删除文件</strong></p>
<p><code>rm 参数 文件</code></p>
<p>例：想删除驱动的缓存 </p>
<p><code>rm -rf /System/Library/Extensions.kextcache</code><br><code>rm -rf /System/Library/Extensions.mkext</code></p>
<p>参数<code>－rf</code>表示递归和强制，千万要小心使用，如果执行了<code>rm -rf /</code>你的系统就全没了！！！ </p>
<p><strong>移动文件</strong></p>
<p><code>mv 文件</code></p>
<p>例：想把AppleHDA.Kext 移到桌面</p>
<p><code>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</code></p>
<p>想把AppleHDA.Kext 移到备份目录中 </p>
<p><code>mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup</code></p>
<p><strong>更改文件权限</strong></p>
<p><code>chmod 参数 权限 文件</code></p>
<p>例：把驱动目录下所有文件设定到root读写，其他用户只读 </p>
<p><code>chmod -R 755 /System/Library/Extensions</code></p>
<p>参数R 表示递归，755表示各用户的权限。</p>
<p><strong>更改文件属主</strong> </p>
<p><code>chown 参数 用户:组 文件</code></p>
<p>例：把驱动目录下的所有文件属主改成根用户 </p>
<p><code>chown -R root:wheel /System/Library/Extensions</code></p>
<p>参数R 表示递归操作 </p>
<p><strong>修复整个系统中文件的权限</strong></p>
<p><code>diskutil repairpermissions /</code></p>
<p>严格的说这不是一个unix 命令，而是osx一个软件，记得修改或添加的驱动就执行一次。 </p>
<p><strong>文本编辑</strong> </p>
<p><code>nano 文件名</code></p>
<p>例：编辑natit Info.plist </p>
<p><code>nano /System/Library/Extensions/Natit.kext/Info.plist</code></p>
<p>编辑完成后 用 Ctrl ＋O 存盘，Ctrl＋X 退出；</p>
<p>另一个文本编辑软件是 vi，操作有些古怪，熟了是非常好用的，而且在所有类Unix系统中都它，走遍天下都不怕了。 </p>
<p><strong>运行脚本命令</strong></p>
<p>sh 脚本文件名 </p>
<p>例 修改驱动后所有需要的操作存成一个脚本，以后修改了驱动后只要运行一次这个脚本就可以了，方便吧。</p>
<ol>
<li>终端中运行<code>nano /clean</code>； </li>
<li><p>把下列代码粘贴到 nano 中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rm -rf /System/Library/Extensions.kextcache </div><div class="line">rm -rf /System/Library/Extensions.mkext </div><div class="line">chown -R root:wheel /System/Library/Extensions </div><div class="line">chmod -R 755 /System/Library/Extensions </div><div class="line">diskutil repairpermissions / </div><div class="line">kextcache -k /System/Library/Extensions/</div></pre></td></tr></table></figure>
</li>
<li><p>Ctrl ＋O 存盘，Ctrl＋X 退出；</p>
</li>
<li>以后只要动了驱动，就在终端中运行一次 <code>sh /clean</code>。</li>
</ol>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p><strong>用Tab键自动补齐命令</strong></p>
<p>比如想到<code>/System</code>目录中去，输入<code>cd /Sy</code>然后按一下Tab 键，命令就会自动补齐成 cd /System；</p>
<p><strong>操作带名字中带有空格的文件和目录</strong></p>
<p>空格在命令中写成 空格， 比如要进入My Documents，命令为<code>cd My Documents</code>；</p>
<p><strong>查看命令的详细帮助</strong></p>
<p><code>man 命令名</code></p>
<p>比如要看看ls命令的详细用法，执行 <code>man ls</code>。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OSX-的文件系统&quot;&gt;&lt;a href=&quot;#OSX-的文件系统&quot; class=&quot;headerlink&quot; title=&quot;OSX 的文件系统&quot;&gt;&lt;/a&gt;OSX 的文件系统&lt;/h3&gt;&lt;p&gt;OSX采用的是Unix文件系统，所有文件都挂在根目录下面，这与Windows下的盘符
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac OSX" scheme="http://jelon.top/tags/Mac-OSX/"/>
    
      <category term="命令大全" scheme="http://jelon.top/tags/%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo填坑教程整理</title>
    <link href="http://jelon.top/posts/fill-hexo/"/>
    <id>http://jelon.top/posts/fill-hexo/</id>
    <published>2016-05-15T11:01:11.000Z</published>
    <updated>2016-11-20T10:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自<a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>，后续我也会陆续补充。</p>
<a id="more"></a>
<h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<p>这里可能安装失败，可能权限不够，在命令前加sudo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<h3 id="2-部署Hexo"><a href="#2-部署Hexo" class="headerlink" title="2. 部署Hexo"></a>2. 部署Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>注：这个命令会初始化博客的目录，所以，执行这个命令时，在你想创建的目录下执行，就自动生成到对应目录下。<br>执行命令生，会在当前命令的路径下，生成以下文件：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .deploy</div><div class="line">├── <span class="keyword">public</span></div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── <span class="keyword">source</span></div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">├── themes</div><div class="line">├── _config.yml</div><div class="line">└── <span class="keyword">package</span>.json</div></pre></td></tr></table></figure>
<ul>
<li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>
<li>public：执行hexo generate命令，输出的静态网页内容目录</li>
<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>
<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>
<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li>
<li>_drafts：草稿文章</li>
<li>_posts：发布文章</li>
<li>themes：主题文件目录</li>
<li>_config.yml：全局配置文件，大多数的设置都在这里</li>
<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>
</ul>
<h3 id="3-Hexo命令"><a href="#3-Hexo命令" class="headerlink" title="3. Hexo命令"></a>3. Hexo命令</h3><p>Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。</p>
<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>在你博客目录下有一个文件名_config.yml，打开可以配置信息。</p>
<h4 id="局部页面"><a href="#局部页面" class="headerlink" title="局部页面"></a>局部页面</h4><p>在你博客目录下 \themes\你使用的主题_config.yml</p>
<h3 id="写博客相关命令"><a href="#写博客相关命令" class="headerlink" title="写博客相关命令"></a>写博客相关命令</h3><p>Hexo常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span>       <span class="comment">#新建文章</span></div><div class="line">hexo new page <span class="string">"pageName"</span>  <span class="comment">#新建页面</span></div><div class="line">hexo generate             <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server               <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy               <span class="comment">#将.deploy目录部署到GitHub</span></div></pre></td></tr></table></figure>
<p>当然，如果每次输入那么长命令，那么一定想到用简写：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>其它的，还可以复合命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo deploy -g</div><div class="line">hexo server -g</div></pre></td></tr></table></figure>
<p>有时候生成的网页出错了，而生成的rss其实没有清除，那么用下面的命令，在重新生成吧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>当本地调试出现诡异现象时候，请先使用 hexo clean 清理已经生成的静态文件后重试。</p>
<p>注：Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？<br>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>
<h3 id="4-一些报错处理"><a href="#4-一些报错处理" class="headerlink" title="4. 一些报错处理"></a>4. 一些报错处理</h3><ul>
<li>在本地调试开启server的时候出现如下提示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Plugin load failed: hexo-server</div></pre></td></tr></table></figure>
<p>原因：</p>
<p>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</p>
<p>解决方法，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install hexo-server</div></pre></td></tr></table></figure>
<ul>
<li>执行命令hexo server，有如下提示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Usage: hexo</div><div class="line">...</div></pre></td></tr></table></figure>
<p>原因：</p>
<p>我认为是没有生成本地服务<br>解决方法，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-server --save</div></pre></td></tr></table></figure>
<ul>
<li>提示：hexo-server@0.1.2 node_modules/hexo-server</li>
</ul>
<p>白板和Cannot GET / 几个字</p>
<p>原因:</p>
<p>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-ejs --save</div><div class="line">$ npm install hexo-renderer-stylus --save</div><div class="line">$ npm install hexo-renderer-marked --save</div></pre></td></tr></table></figure>
<p>这个时候再重新生成静态文件，命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate （或hexo g）</div></pre></td></tr></table></figure>
<p>启动本地服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server （或hexo s）</div></pre></td></tr></table></figure>
<ul>
<li>升级 node 版本之后编译报错</li>
</ul>
<p>原因：可能是由于 hexo 依赖的 node 版本号还是以前版本而导致</p>
<p>解决方法：建议重装一下 hexo ，重新执行一遍 <code>npm install -g hexo-cli</code> 即可。</p>
<h3 id="5-博客管理"><a href="#5-博客管理" class="headerlink" title="5. 博客管理"></a>5. 博客管理</h3><p>上面命令中，其实生成文章，可以直接把写好的文章插入到目录<code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p>
<ul>
<li>title: Mac提高使用效率的一些方法   # 文章的标题，这个才是显示的文章标题，其实文件名不影响</li>
<li>date: 2015-09-01 20:33:26      # 用命令会自动生成，也可以自己写，所以文章时间可以改</li>
<li>categories: technology         # 文章的分类，这个可以自己定义</li>
<li>tags: [Mac,效率,快捷方式]        # tag，为文章添加标签，方便搜索</li>
</ul>
<p>当然，里面有很多东西的，如果你专注于写作，那么可以不用太关心了，比如tags标签可以写成下面那样，因为hexo文章的头部文件是用AML来写的。</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">tags:</span></div><div class="line">  - tag1</div><div class="line">  - tag2</div></pre></td></tr></table></figure>
<p>如果在博客文章列表中，不想全文显示，可以增加<em><!--more--></em> , 后面的内容就不会显示在列表。</p>
<h3 id="6-插件"><a href="#6-插件" class="headerlink" title="6. 插件"></a>6. 插件</h3><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;plugin-name&gt; --save</div></pre></td></tr></table></figure>
<p>添加RSS</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed</div></pre></td></tr></table></figure>
<p>然后，到博客目录 /public 下，如果没有发现atom.xml，说明命令没有生效！！！(楼主就是在这里被坑了次)<br>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>这个命令来自hexo-generator-feed</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Install</div><div class="line">   $ npm install hexo-generator-feed --save</div><div class="line"> Hexo 3: 1.x</div><div class="line"> Hexo 2: 0.x</div><div class="line">Options</div><div class="line">   You can configure this plugin <span class="keyword">in</span> _config.yml.</div><div class="line"></div><div class="line">  feed:</div><div class="line">     <span class="built_in">type</span>: atom</div><div class="line">     path: atom.xml</div><div class="line">     <span class="built_in">limit</span>: 20</div><div class="line"></div><div class="line">    <span class="built_in">type</span> - Feed type. (atom/rss2)</div><div class="line">    path - Feed path. (Default: atom.xml/rss2.xml)</div><div class="line">    <span class="built_in">limit</span> - Maximum number of posts <span class="keyword">in</span> the feed (Use 0 or <span class="literal">false</span> to show all posts)</div></pre></td></tr></table></figure>
<p>其中可以选择：<br>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">    <span class="built_in">type</span>: atom</div><div class="line">    path: atom.xml</div><div class="line">    <span class="built_in">limit</span>: 20</div><div class="line"><span class="comment">#type 表示类型, 是 atom 还是 rss2.</span></div><div class="line"><span class="comment">#path 表示 Feed 路径</span></div><div class="line"><span class="comment">#limit 最多多少篇最近文章</span></div></pre></td></tr></table></figure>
<p>最后，在 hexo generate之后，会发现public文件夹下多了atom.xml！</p>
<p>例如要订阅我的blog只要输入ihtc.cc/atom就可以搜寻到啦！</p>
<p>添加Sitemap<br>Sitemap 的提交主要的目的，是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>这个命令来自hexo-generator-sitemap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Install</div><div class="line">    $ npm install hexo-generator-sitemap --save</div><div class="line"></div><div class="line">    Hexo 3: 1.x</div><div class="line">    Hexo 2: 0.x</div><div class="line">Options</div><div class="line">    You can configure this plugin <span class="keyword">in</span> _config.yml.</div><div class="line"></div><div class="line">    sitemap:</div><div class="line">        path: sitemap.xml</div><div class="line">    path - Sitemap path. (Default: sitemap.xml)</div></pre></td></tr></table></figure>
<p>同样可以选择：<br>在 Hexo 根目录下的 _config.yml 里配置一下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">   path: sitemap<span class="selector-class">.xml</span></div><div class="line">   <span class="selector-id">#path</span> 表示 Sitemap 的路径. 默认为 sitemap<span class="selector-class">.xml</span>.</div></pre></td></tr></table></figure>
<p>对于国内用户还需要安装插件 hexo-generator-baidu-sitemap, 顾名思义是为百度量身打造的。 </p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>然后在 Hexo 根目录下的 _config.yml 里配置一下</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">baidusitemap:</span></div><div class="line"><span class="symbol">	path:</span> baidusitemap.xml</div></pre></td></tr></table></figure>
<p>其它插件<br>Plugins · hexojs/hexo</p>
<h3 id="7-评论设置"><a href="#7-评论设置" class="headerlink" title="7. 评论设置"></a>7. 评论设置</h3><p>在Hexo中，默认使用的评论是国外的Disqus,不过因为国内的”网络环境”问题，我们改为国内的多说评论系统。</p>
<p>需要说明的是 short_name:字段，这个字段为你多说填写的站点名字，比如我的域名：jelon.duoshuo.com，那么我的short_name: “jelon”</p>
<h3 id="8-404页面"><a href="#8-404页面" class="headerlink" title="8. 404页面"></a>8. 404页面</h3><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。<br>其实，404页面可以做更多有意义的事，来做个404公益项目吧。<br>腾讯公益 404.html :</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">公益404介接入地址</div><div class="line">益云公益404 http://yibo.iyiyun.com/Index/web404</div><div class="line">腾讯公益404 http://www.qq.com/404</div><div class="line">失蹤兒童少年資料管理中心404 http://404page.missingkids.org.tw</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>
<h3 id="9-统计"><a href="#9-统计" class="headerlink" title="9. 统计"></a>9. 统计</h3><p>因Google Analytics偶尔被墙，故国内用百度统计<br>最新的统计服务已经开放，两行代码轻松搞定，你可以直接使用：不蒜子<br>本人墙裂推荐，只需要两行代码哦。各种用法实例和显示效果参考不蒜子文档中的实例链接。不蒜子，极客的算子，极简的算子，任你发挥的算子。</p>
<h3 id="10-更新"><a href="#10-更新" class="headerlink" title="10. 更新"></a>10. 更新</h3><p>更新hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update -g hexo</div></pre></td></tr></table></figure>
<p>更新主题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/你的主题</div><div class="line">$ git pull</div></pre></td></tr></table></figure>
<p>更新插件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm update</div></pre></td></tr></table></figure>
<h3 id="11-参考"><a href="#11-参考" class="headerlink" title="11. 参考"></a>11. 参考</h3><ul>
<li><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">简书</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;本文主要讲解Hexo安装时遇到的坑，Hexo安装之后的使用教程，Hexo安装需要的环境和教程，请自行百度、谷歌，主要整理来自&lt;a href=&quot;http://www.jianshu.com/&quot;&gt;简书&lt;/a&gt;，后续我也会陆续补充。&lt;/p&gt;
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://jelon.top/tags/Hexo/"/>
    
      <category term="github pages" scheme="http://jelon.top/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码详解</title>
    <link href="http://jelon.top/posts/http-status-code/"/>
    <id>http://jelon.top/posts/http-status-code/</id>
    <published>2016-04-23T11:05:42.000Z</published>
    <updated>2017-02-04T06:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。</p>
<a id="more"></a>
<p>接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。</p>
<h3 id="HTTP状态码表"><a href="#HTTP状态码表" class="headerlink" title="HTTP状态码表"></a>HTTP状态码表</h3><table>
<thead>
<tr>
<th style="text-align:center">状态代码</th>
<th style="text-align:center">状态信息</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&nbsp;&nbsp;&nbsp;&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td style="text-align:center">Continue</td>
<td style="text-align:left">初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">Switching Protocols</td>
<td style="text-align:left">服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">OK</td>
<td style="text-align:left">一切正常，对GET和POST请求的应答文档跟在后面。</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:center">Created</td>
<td style="text-align:left">服务器已经创建了文档，Location头给出了它的URL。</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:center">Accepted</td>
<td style="text-align:left">已经接受请求，但处理尚未完成。</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:center">Non-Authoritative Information</td>
<td style="text-align:left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:center">No Content</td>
<td style="text-align:left">没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:center">Reset Content</td>
<td style="text-align:left">没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:center">Partial Content</td>
<td style="text-align:left">客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:center">Multiple Choices</td>
<td style="text-align:left">客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">Moved Permanently</td>
<td style="text-align:left">客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">Found</td>
<td style="text-align:left">类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href="http://host/~user（缺少了后面的斜杠），有的服务器" target="_blank" rel="external">http://host/~user（缺少了后面的斜杠），有的服务器</a> 返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">See Other</td>
<td style="text-align:left">类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">Not Modified</td>
<td style="text-align:left">客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:center">Use Proxy</td>
<td style="text-align:left">客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:center">Temporary Redirect</td>
<td style="text-align:left">和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:center">Bad Request</td>
<td style="text-align:left">请求出现语法错误。</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:center">Unauthorized</td>
<td style="text-align:left">客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">Forbidden</td>
<td style="text-align:left">资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">Not Found</td>
<td style="text-align:left">无法找到指定位置的资源。这也是一个常用的应答。</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:center">Method Not Allowed</td>
<td style="text-align:left">请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:center">Not Acceptable</td>
<td style="text-align:left">指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:center">Proxy Authentication Required</td>
<td style="text-align:left">类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:center">Request Timeout</td>
<td style="text-align:left">在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:center">Conflict</td>
<td style="text-align:left">通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:center">Gone</td>
<td style="text-align:left">所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:center">Length Required</td>
<td style="text-align:left">服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:center">Precondition Failed</td>
<td style="text-align:left">请求头中指定的一些前提条件失败（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:center">Request Entity Too Large</td>
<td style="text-align:left">目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:center">Request URI Too Long</td>
<td style="text-align:left">URI太长（HTTP 1.1新）。</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:center">Requested Range Not Satisfiable</td>
<td style="text-align:left">服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">Internal Server Error</td>
<td style="text-align:left">服务器遇到了意料不到的情况，不能完成客户的请求。</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:center">Not Implemented</td>
<td style="text-align:left">服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">Bad Gateway</td>
<td style="text-align:left">服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:center">Service Unavailable</td>
<td style="text-align:left">服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:center">Gateway Timeout</td>
<td style="text-align:left">由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:center">HTTP Version Not Supported</td>
<td style="text-align:left">服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一名Web开发者，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTTP" scheme="http://jelon.top/tags/HTTP/"/>
    
      <category term="网络状态码" scheme="http://jelon.top/tags/%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSS 编码规范</title>
    <link href="http://jelon.top/posts/css-code-style/"/>
    <id>http://jelon.top/posts/css-code-style/</id>
    <published>2016-04-17T12:08:47.000Z</published>
    <updated>2016-04-17T04:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p><strong>一般性命名</strong></p>
<p>使用小写字母，复合词以 - 分隔; 例如<code>nav.css , login-nav.css , login-page.css</code></p>
<a id="more"></a>
<p><strong>id 和类的命名</strong></p>
<p>为 id 和样式类使用有意义或通用的名字，避免由于 css 命名更改引起的不必要的文档或模板改变；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐： 无意义 */</span></div><div class="line"><span class="selector-id">#yee-1901</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 不推荐： 表现层的命名 */</span></div><div class="line"><span class="selector-class">.button-green</span> &#123;&#125;</div><div class="line"><span class="comment">/* 推荐: 具体 */</span></div><div class="line"><span class="selector-id">#gallery</span> &#123;&#125;</div><div class="line"><span class="selector-id">#login</span> &#123;&#125;</div><div class="line"><span class="selector-class">.video</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 推荐: 通用 */</span></div><div class="line"><span class="selector-class">.effect</span> &#123;&#125;</div><div class="line"><span class="selector-class">.alt</span> &#123;&#125;</div></pre></td></tr></table></figure>
<p>id 和 class 的命名长度应该适中，不要太简略也不要太详细；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-id">#navigation</span> &#123;&#125;</div><div class="line"><span class="selector-class">.atr</span> &#123;&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-id">#nav</span> &#123;&#125;</div><div class="line"><span class="selector-class">.author</span> &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>元素选择器</strong></p>
<p>为了 性能原因 ， 请避免元素选择器和类选择器以及 id 选择器混用；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-tag">ul</span><span class="selector-id">#example</span> &#123;&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.error</span> &#123;&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-id">#example</span> &#123;&#125;</div><div class="line"><span class="selector-class">.error</span> &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>简写属性名字</strong></p>
<p>为了提高可读性，尽可能的使用简写属性；</p>
<p>例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* 不推荐 */</div><div class="line">border-top-style: none;</div><div class="line">font-family: palatino, georgia, serif;</div><div class="line">font-size: 100%;</div><div class="line">line-height: 1.6;</div><div class="line">padding-bottom: 2em;</div><div class="line">padding-left: 1em;</div><div class="line">padding-right: 1em;</div><div class="line">padding-top: 0;</div><div class="line">/* 推荐 */</div><div class="line">border-top: 0;</div><div class="line">font: 100%/1.6 palatino, georgia, serif;</div><div class="line">padding: 0 1em 2em;</div></pre></td></tr></table></figure>
<p><strong>0 和单位</strong></p>
<p>对属性值为 0 的情况省略单位；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin</span>: 0;</div><div class="line"><span class="selector-tag">padding</span>: 0;</div></pre></td></tr></table></figure>
<p><strong>0 前缀情况</strong></p>
<p>省略属性值中的 0 前缀；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span>: <span class="selector-class">.8em</span>;</div></pre></td></tr></table></figure>
<p><strong>16 进制的颜色值表示</strong></p>
<p>尽可能使用 3 个字符的 16 进制颜色值；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#eebbcc</span>;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#ebc</span>;</div></pre></td></tr></table></figure>
<p><strong>前缀</strong></p>
<p>为了防止冲突，对于应用特定的样式附加应用前缀；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.login-help</span> &#123;&#125; <span class="comment">/* login page */</span></div><div class="line"><span class="selector-id">#detail-note</span> &#123;&#125; <span class="comment">/* detail page */</span></div></pre></td></tr></table></figure>
<p><strong>hacks</strong></p>
<p>避免 css hack ， 考虑使用特定浏览器前缀表示；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ks-ie6</span> <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h3><p><strong>属性声明顺序</strong></p>
<p>按照字母顺序声明属性，排序时忽略私有的浏览器前缀，对于特定的浏览器，私有的浏览器前缀应该参与排序；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">fuchsia</span>;</div><div class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</div><div class="line"><span class="selector-tag">-moz-border-radius</span>: 4<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">-webkit-border-radius</span>: 4<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-tag">black</span>;</div><div class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</div><div class="line"><span class="selector-tag">text-indent</span>: 2<span class="selector-tag">em</span>;</div></pre></td></tr></table></figure>
<p><strong>块缩进</strong></p>
<p>块的内容应该被缩进；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen, projection &#123;</div><div class="line"></div><div class="line">  <span class="selector-tag">html</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>分号</strong></p>
<p>使用分号结束单个属性的定义；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-class">.test</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-class">.test</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>空格</strong></p>
<p>在属性名冒号后加一个空格；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-class">.test</span> &#123;</div><div class="line">  <span class="attribute">display</span>:block;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-class">.test</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>空行</strong></p>
<p>多个选择以及声明间以行分隔；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative; <span class="attribute">top</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line"><span class="selector-tag">h1</span>,</div><div class="line"><span class="selector-tag">h2</span>,</div><div class="line"><span class="selector-tag">h3</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: normal;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多个 css 规则间以空行分隔；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>引号</strong></p>
<p>尽可能的不用引号，迫不得已时使用单引号；</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不推荐 */</span></div><div class="line">@<span class="keyword">import</span> url(<span class="string">"//www.google.com/css/maia.css"</span>);</div><div class="line"></div><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"open sans"</span>, arial, sans-serif;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 推荐 */</span></div><div class="line">@<span class="keyword">import</span> url(//www.google.com/css/maia.css);</div><div class="line"></div><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'open sans'</span>, arial, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注释</strong></p>
<p>成组的 css 规则间用块状注释和空行分离；</p>
<p>例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Header */</span></div><div class="line"></div><div class="line"><span class="selector-id">#login-header</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#login-header-below</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Footer */</span></div><div class="line"></div><div class="line"><span class="selector-id">#login-footer</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#login-footer-below</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Gallery */</span></div><div class="line"></div><div class="line"><span class="selector-class">.login-gallery</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.login-gallery-other</span> &#123;&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码规范&quot;&gt;&lt;a href=&quot;#代码规范&quot; class=&quot;headerlink&quot; title=&quot;代码规范&quot;&gt;&lt;/a&gt;代码规范&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一般性命名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用小写字母，复合词以 - 分隔; 例如&lt;code&gt;nav.css , login-nav.css , login-page.css&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="css" scheme="http://jelon.top/tags/css/"/>
    
      <category term="编码规范" scheme="http://jelon.top/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 最全编码规范</title>
    <link href="http://jelon.top/posts/js-docs/"/>
    <id>http://jelon.top/posts/js-docs/</id>
    <published>2016-03-13T12:22:12.000Z</published>
    <updated>2016-08-29T14:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>基本类型：访问基本类型时，应该直接操作类型值</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</div><div class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></div></pre></td></tr></table></figure>
<p>复合类型：访问复合类型时，应该操作其引用</p>
<ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>使用字面量语法创建</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>不要使用保留字，在 IE8 中不起作用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">private</span>: <span class="literal">true</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">defaults</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用易读的同义词代替保留字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">c1ass</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">klass</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>使用字面量语法创建数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = [];</div></pre></td></tr></table></figure>
<p>添加数组元素时，使用 push 而不是直接添加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div></pre></td></tr></table></figure>
<p>需要复制数组时，可以使用 slice</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = items.length;</div><div class="line"><span class="keyword">var</span> itemsCopy = [];</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">itemsCopy = items.slice();</div></pre></td></tr></table></figure>
<p>使用 slice 将类数组对象转为数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>对字符串使用单引号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure>
<p>超过80个字符的字符串应该使用字符串连接符进行跨行</p>
<p>注意：对长字符串过度使用连接符将会影响性能。相关的文章和主题讨论： jsPerf &amp; Discussion.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></div><div class="line">of Batman. When you stop to think about how Batman had anything to do \</div><div class="line">with this, you would get nowhere \</div><div class="line">fast.';</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</div><div class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</div></pre></td></tr></table></figure>
<p>以编程方式创建字符串的时应该使用 Array 的 join 方法而不是通过连接符，尤其是在 IE 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items;</div><div class="line"><span class="keyword">var</span> messages;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line">messages = [&#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'success'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one worked.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'success'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one worked as well.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'error'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one did not work.'</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items[i] = <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// very good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = [];</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = messages.length; i &lt; len; i++) &#123;</div><div class="line">    items.push(<span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数表达式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// anonymous function expression</span></div><div class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// named function expression</span></div><div class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>不要在非函数块中 (if, while, etc) 声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它</p>
<p>注意：ECMA-262 把块定义为一组语句，但函数声明不是一个语句： Read ECMA-262’s note on this issue.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> test;</div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要命名一个参数为 arguments ，否则它将优先于传递给每个函数作用域中的 arguments 对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>使用点表示法访问属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">'jedi'</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> isJedi = luke.jedi;</div></pre></td></tr></table></figure>
<p>用变量访问属性时要使用下标表示法([])</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</div></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>总是使用 var 声明变量，不然其将变为全局变量。我们要想办法避免全局空间污染</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">superPower = <span class="keyword">new</span> SuperPower();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</div></pre></td></tr></table></figure>
<p>使用 var 声明每个变量，这样很容易添加新的变量声明，而不用去担心用 a; 替换 a </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>
<p>最后声明未赋值的变量，这对于你需要根据之前已经赋值的变量对一个变量进行赋值时是很有帮助的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i;</div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> len;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div></pre></td></tr></table></figure>
<p>在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h3><p>变量声明是在作用域的顶端，但是赋值没有</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// we know this wouldn't work (assuming there</span></div><div class="line"><span class="comment">// is no notDefined global variable)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// creating a variable declaration after you</span></div><div class="line"><span class="comment">// reference the variable will work due to</span></div><div class="line"><span class="comment">// variable hoisting. Note: the assignment</span></div><div class="line"><span class="comment">// value of `true` is not hoisted.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The interpreter is hoisting the variable</span></div><div class="line"><span class="comment">// declaration to the top of the scope,</span></div><div class="line"><span class="comment">// which means our example could be rewritten as:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名表达式能提升他们的变量名，但不能提升函数赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>命名函数表达式会提升变量名，而不是函数名或者函数体</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// the same is true when the function name</span></div><div class="line"><span class="comment">// is the same as the variable name.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数声明会提升变量名和函数体</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  superPower(); <span class="comment">// =&gt; Flying</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="比较运算符-amp-相等"><a href="#比较运算符-amp-相等" class="headerlink" title="比较运算符&amp;相等"></a>比较运算符&amp;相等</h3><p>使用 === 和 !== 代替 == 和 !=</p>
<p>比较运算符进行计算时会利用 ToBoolean 方法进行强制转换数据类型，并遵从以下规则</p>
<ul>
<li>Objects 的计算值是 true</li>
<li>Undefined 的计算值是 false</li>
<li>Boolean 的计算值是 boolean 的值</li>
<li>Numbers 如果是 -0 ，+0 或者 NaN ，则计算值是 false，反之是 true</li>
<li>Strings 如果是空，则计算值是 false，反之是 true</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</div><div class="line">  <span class="comment">// true</span></div><div class="line">  <span class="comment">// An array is an object, objects evaluate to true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用快捷方式"><a href="#使用快捷方式" class="headerlink" title="使用快捷方式"></a>使用快捷方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h3><p>对多行的语句块使用大括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于使用 if 和 else 的多行语句块，把 else 和 if 语句块的右大括号放在同一行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>多行注释使用 /<em>* … </em>/，需包含一个描述、所有参数的具体类型和值以及返回值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &#123;String&#125; tag</span></div><div class="line"><span class="comment">// @return &#123;Element&#125; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed in tag name</div><div class="line"> *</div><div class="line"> * @param &#123;String&#125; tag</div><div class="line"> * @return &#123;Element&#125; element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>单行注释使用 // ，把单行注释放在语句的上一行，并且在注释之前空一行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你指出的问题需要重新定位或者提出一个待解决的问题需要实现，给注释添加 FIXME or TODO 前缀有利于其他开发者快速理解。这些注释不同于通常的注释，因为它们是可实施的。这些实施措施就是FIXME – need to figure this out or TODO – need to implement.使用 // FIXME: 给一个问题作注释</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></div><div class="line">  total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 //TODO: 给问题解决方案作注释</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></div><div class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- more -->
<h4 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h4><p>使用软制表符设置两个空格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在左大括号之前留一个空格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dog.set(<span class="string">'attr'</span>,&#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span>,</div><div class="line">  <span class="attr">breed</span>: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dog.set(<span class="string">'attr'</span>, &#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span>,</div><div class="line">  <span class="attr">breed</span>: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在控制语句中（if, while etc），左括号之前留一个空格。函数的参数列表之前不要有空格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(isJedi) &#123;</div><div class="line">  fight ();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (isJedi) &#123;</div><div class="line">  fight();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用空白分隔运算符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</div></pre></td></tr></table></figure>
<p>用一个换行符结束文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div><div class="line">↵</div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div></pre></td></tr></table></figure>
<p>当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).</div><div class="line">  find(<span class="string">'.selected'</span>).</div><div class="line">    highlight().</div><div class="line">    end().</div><div class="line">  find(<span class="string">'.open'</span>).</div><div class="line">    updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>
<p>在语句块和下一个语句之前留一个空行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure>
<h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h3><p>不要在语句前留逗号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">    once</div><div class="line">  , upon</div><div class="line">  , aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">  once,</div><div class="line">  upon,</div><div class="line">  aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Bob'</span></div><div class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></div><div class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></div><div class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Bob'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Parr'</span>,</div><div class="line">  <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span>,</div><div class="line">  <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不要有多余逗号：这会在IE6、IE7和IE9的怪异模式中导致一些问题；同时，在ES3的一些实现中，多余的逗号会增加数组的长度。在ES5中已经澄清（source）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Kevin'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Flynn'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span>,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Kevin'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Flynn'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span></div><div class="line">];</div></pre></td></tr></table></figure>
<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>恩，这也是规范一部分</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// good (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="类型分配-amp-强制转换"><a href="#类型分配-amp-强制转换" class="headerlink" title="类型分配&amp;强制转换"></a>类型分配&amp;强制转换</h3><p>执行强制类型转换的语句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Strings:</div><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>
<p>使用 parseInt 对 Numbers 进行转换，并带一个进制作为参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>无论出于什么原因，或许你做了一些”粗野”的事；或许 parseInt 成了你的瓶颈；或许考虑到性能，需要使用位运算，都要用注释说明你为什么这么做</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * parseInt was the reason my code was slow.</div><div class="line"> * Bitshifting the String to coerce it to a</div><div class="line"> * Number made it a lot faster.</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>注意：当使用位运算时，Numbers 被视为64位值，但是位运算总是返回32位整型 (source) 。对于整型值大于32位的进行位运算将导致不可预见的行为。Discussion. 最大的有符号32位整数是2,147,483,647</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></div><div class="line">Booleans:</div><div class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = !!age;</div></pre></td></tr></table></figure>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>避免单字母名称，让名称具有描述性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当命名对象、函数和实例时使用骆驼拼写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当命名构造函数或类名时，使用驼峰式写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'yup'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>命名私有属性时使用前置下划线</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div></pre></td></tr></table></figure>
<p>保存 this 引用时使用 _this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(self);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(that);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_this);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>命名函数时，下面的方式有利于堆栈跟踪</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>注意：IE8 和怪异模式下命名函数表示，戳此：<a href="http://kangax.github.io/nfe/" target="_blank" rel="external">http://kangax.github.io/nfe/</a> 如果文件作为一个类被导出，文件名应该和类名保持一致</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file contents</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = CheckBox;</div><div class="line"></div><div class="line"><span class="comment">// in some other file</span></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</div></pre></td></tr></table></figure>
<h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p>对于属性，访问器函数不是必须的</p>
<p>如果定义了存取器函数，应参照 getVal() 和 setVal(‘hello’) 格式.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.getAge();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age(<span class="number">25</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.setAge(<span class="number">25</span>);</div></pre></td></tr></table></figure>
<p>如果属性时 boolean ，格式应为 isVal() or hasVal()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建 get() and set() 函数时不错的想法，但是要保持一致</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</div><div class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>[key] = val;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在原型对象上定义方法，而不是用新对象重写它。重写使继承变为不可能：重置原型将重写整个基类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype = &#123;</div><div class="line">  <span class="attr">fight</span>: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">block</span>: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>方法应该返回 this，有利于构成方法链</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line">luke.jump(); <span class="comment">// =&gt; true</span></div><div class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line"></div><div class="line">luke.jump()</div><div class="line">  .setHeight(<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>写一个自定义的 toString() 方法是可以的，只要确保它能正常运行并且不会产生副作用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>当在事件对象上附加数据时（无论是 DOM 事件还是如 Backbone 一样拥有的私有事件），应传递散列对象而不是原始值，这可以让随后的贡献者给事件对象添加更多的数据，而不必去查找或者更新每一个事件处理程序。举个粟子，不要用下面的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>应该按如下方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>遵循原则：</p>
<p>模块应该以 ! 开始，这能确保当脚本连接时，如果畸形模块忘记导入，包括最后一个分号，不会产生错误；<br>文件应该以驼峰式命名，放在同名的文件夹中，和单出口的名称相匹配；<br>定义一个 noConflict() 方法来设置导出模块之前的版本,并返回当前版本；<br>在模块的顶部申明 ’use strict’。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fancyInput/fancyInput.js</span></div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    global.FancyInput = previousFancyInput;</div><div class="line">    <span class="keyword">return</span> FancyInput;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  global.FancyInput = FancyInput;</div><div class="line">&#125;(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><p>jQuery对象变量使用前缀$</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"><span class="comment">// 缓存jQuery查询</span></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $sidebar.css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用级联$(‘.sidebar ul’)或父子$(‘.sidebar &gt; ul’)选择器进行DOM查询；</p>
<p>在范围内使用find进行jQuery对象查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;p&gt;基本类型：访问基本类型时，应该直接操作类型值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编码规范" scheme="http://jelon.top/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="js" scheme="http://jelon.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于新博客</title>
    <link href="http://jelon.top/posts/hello-new-blog/"/>
    <id>http://jelon.top/posts/hello-new-blog/</id>
    <published>2016-03-12T16:10:21.000Z</published>
    <updated>2016-07-30T04:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写独立博客"><a href="#写独立博客" class="headerlink" title="写独立博客"></a>写独立博客</h3><p>自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。<br><a id="more"></a></p>
<h3 id="此次改版"><a href="#此次改版" class="headerlink" title="此次改版"></a>此次改版</h3><p>其实，Hexo静态博客程序我已经早有听说，直接将写成博客页面免费挂到github上非常方便。正因为此，这次我又将博客从typecho迁移到了hexo，然后在重新申请了域名jelon.top（华夏名网上申请的，4块多一年，还是很便宜的）。</p>
<h3 id="博客用途"><a href="#博客用途" class="headerlink" title="博客用途"></a>博客用途</h3><p>做这个博客呢，其实也没有多大的用途，主要用途其实也无非以下两点：</p>
<ul>
<li>技术积累分享</li>
<li>生活琐事记录 </li>
</ul>
<p>因此，我把博客简单分成了两个板块，Web技术和生活琐事。无论工作上的事情、生活上的事情，甚至感情上的事情都可以写在上面。不想用其他第三方博客平台的我，用Hexo搭建自己的博客，时不时也可以折腾一下，改改主题、写写文章什么的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写独立博客&quot;&gt;&lt;a href=&quot;#写独立博客&quot; class=&quot;headerlink&quot; title=&quot;写独立博客&quot;&gt;&lt;/a&gt;写独立博客&lt;/h3&gt;&lt;p&gt;自从大二暑假开通个人的第一个独立博客以来，博客变更了好几次，每次不是换了后台程序就是换了皮肤，甚至有时候换了域名。只能说，做独立博客实在是太不容易了。一是，做独立博客需要自己从后台到前端全栈技术都要懂一些；二是，搭建完博客还是不行的，还要坚持写博文，尤其是原创博文（吐槽一下，我个人觉得自己的水平太水，写原创博文实在好难）；三是，做独立博客需要买域名、买空间，有时候为了方便就直接网站找了个免费的php空间，免费的东西毕竟不太靠谱，网站不稳定，经常会挂掉。&lt;br&gt;
    
    </summary>
    
      <category term="生活琐事" scheme="http://jelon.top/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
    
      <category term="Hexo" scheme="http://jelon.top/tags/Hexo/"/>
    
      <category term="新博客" scheme="http://jelon.top/tags/%E6%96%B0%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>静态博客框架 Hexo 入门</title>
    <link href="http://jelon.top/posts/start-hexo/"/>
    <id>http://jelon.top/posts/start-hexo/</id>
    <published>2015-10-06T10:23:00.000Z</published>
    <updated>2017-02-16T07:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h3><p>简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：<br>官网链接：<em><a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></em></p>
<a id="more"></a>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/2132683522.png" alt="Hexo官网截图"></p>
<p>Github 主页：<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">https://github.com/hexojs/hexo</a><br>不过，现在网上一搜都会搜到很多关于hexo的一些文章，所以想更加地了解 hexo 和获取其主题可以网上找找。</p>
<h3 id="hexo-特性"><a href="#hexo-特性" class="headerlink" title="hexo 特性"></a>hexo 特性</h3><ul>
<li>Blazing Fast —— 速度快——几百篇文章也可以秒生成；</li>
<li>Markdown Support —— 支持 GitHub Flavored Markdown 和所有 Octopress 的插件；</li>
<li>One-Command Deployment —— 需要一个命令就可以配置您的网站 GitHub 页面， Heroku 或其他网站；</li>
<li>Various Plugins —— Hexo 支持 EJS 、Swig和Stylus。通过插件支持 Haml、Jade 和 Less。</li>
</ul>
<h3 id="hexo-使用"><a href="#hexo-使用" class="headerlink" title="hexo 使用"></a>hexo 使用</h3><p><strong>hexo 安装</strong></p>
<p>首先，在安装 hexo 之前，你要先安装 Node.js 和 Git ，具体下载和安装请访问它们的官网。<br>接下来，安装 hexo ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p><strong>初始化 hexo</strong></p>
<p>初始化指定目录，会在目前的文件夹建立一个名为 <folder> 的新文件夹；否则会在目前文件夹初始化。</folder></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>接下来看一下我们安装完之后 hexo 的目录结构是如下这样的：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line"><span class="string">|   ├── _drafts</span></div><div class="line"><span class="string">|   └── _posts</span></div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>为了看起来更加直观，在这里我截一个我自己的目录图：</p>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/2344787021.jpg" alt="目录截图"></p>
<p>目录结构作用在这里简单的介绍一下：</p>
<ul>
<li>_config.yml 文件    —- 为网站配置文件；</li>
<li>package.json 文件 —- 项目模块描述；</li>
<li>source 目录            —- 创建博客文章的源目录，后面有说到这个；</li>
<li>public 目录            —- 静态资源，就是我们直接可以访问的一些资源，这些资源在执行 hexo generate 命令后生成；</li>
<li>themes 目录          —- 放置博客主题，就像WordPress、typecho这些博客程序都是有一个专门用来放置主体的目录，如果一个博客程序没这个功能，那未免也太过于单调，对吧。</li>
</ul>
<p><strong>创建新博客</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"中国移动-139邮箱"</span> <span class="comment"># 创建文章 post</span></div><div class="line">$ hexo new page <span class="string">"about"</span>     <span class="comment"># 创建页面 page</span></div></pre></td></tr></table></figure>
<p>创建博客或文章会在 <code>/source/_posts/</code> 下生成后缀为 <code>.md</code> 的文件，我们可以这个文件上编写我们想要发表的文章或博客，hexo 支持 markdown 语法，很方便快捷。</p>
<p><strong>生成博客</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate  <span class="comment"># 或者 hexo g</span></div></pre></td></tr></table></figure>
<p>生成博客这一步也叫编译，讲写好的 <code>.md</code> 内容生成到 public 目录去，也就是后面运行服务器之后直接访问的东西。</p>
<p><strong>运行服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server <span class="comment"># 或者 hexo s</span></div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>服务器默认会跑在 <a href="http://localhost:port" target="_blank" rel="external">http://localhost:port</a> （port 默认为 4000端口，可在 _config.yml 设置）；</li>
<li>hexo 所依赖的模块参考如下：</li>
</ul>
<p><img src="http://7xs305.com1.z0.glb.clouddn.com/452712668.png" alt="依赖模块"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>编译完博客之后，可以生成的博客内容（静态页面）部署到 github，如果你嫌 github 访问速度比较慢的话，coding 是一个不错的选择。下面是以部署至 github 为例，做简单介绍。</p>
<ol>
<li><p>首先，现在 github 上创建一个新的 repository，（假设，项目名为 jangdelong ）创建好之后，会生成一个 git 项目地址；</p>
</li>
<li><p>把创建好的 github repository 的 git 地址配置到 hexo 目录下的 <code>_config.yml</code> 的配置文件中；</p>
 <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">message</span>: 博客更新 -- at &#123;&#123; now(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) &#125;&#125;</div><div class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/jangdelong/jangdelong.github.com.git</span></div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</li>
<li><p>执行 <code>hexo deploy</code> 或者 <code>hexo d</code> 即可部署；</p>
</li>
<li><p>部署完之后，浏览器地址栏输入 <code>jangdelong.github.io</code> 即可访问。 </p>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">hexo官网：https://hexo.io/</a>；</li>
<li><a href="http://segmentfault.com/a/1190000000370778" target="_blank" rel="external">http://segmentfault.com/a/1190000000370778</a>；</li>
<li><a href="http://segmentfault.com/a/1190000002538363" target="_blank" rel="external">http://segmentfault.com/a/1190000002538363</a>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo-简介&quot;&gt;&lt;a href=&quot;#hexo-简介&quot; class=&quot;headerlink&quot; title=&quot;hexo 简介&quot;&gt;&lt;/a&gt;hexo 简介&lt;/h3&gt;&lt;p&gt;简单地说，Hexo 是一个基于 Node.js 的轻量的静态博客框架。官网如下：&lt;br&gt;官网链接：&lt;em&gt;&lt;a href=&quot;https://hexo.io/&quot;&gt;https://hexo.io/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web技术" scheme="http://jelon.top/categories/Web%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://jelon.top/tags/Hexo/"/>
    
      <category term="Node.js" scheme="http://jelon.top/tags/Node-js/"/>
    
      <category term="静态博客" scheme="http://jelon.top/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
